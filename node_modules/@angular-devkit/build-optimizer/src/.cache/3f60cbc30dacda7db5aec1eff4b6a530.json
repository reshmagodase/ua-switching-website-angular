{"remainingRequest":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\chronos\\locale\\locales.js","dependencies":[{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\chronos\\locale\\locales.js","mtime":1676443216550},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676443201610},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1676443192566}],"contextDependencies":[],"result":["import { Locale } from './locale.class';\r\nimport { baseConfig } from './locale.defaults';\r\nimport { hasOwnProp, isArray, isObject, isString, isUndefined, toInt } from '../utils/type-checks';\r\nimport { compareArrays } from '../utils/compare-arrays';\r\nvar locales = {};\r\nvar localeFamilies = {};\r\nvar globalLocale;\r\nfunction normalizeLocale(key) {\r\n    return key ? key.toLowerCase().replace('_', '-') : key;\r\n}\r\n// pick the locale from the array\r\n// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\r\n// substring from most specific to least,\r\n// but move to the next array item if it's a more specific variant than the current root\r\nfunction chooseLocale(names) {\r\n    var next;\r\n    var locale;\r\n    var i = 0;\r\n    while (i < names.length) {\r\n        var split = normalizeLocale(names[i]).split('-');\r\n        var j = split.length;\r\n        next = normalizeLocale(names[i + 1]);\r\n        next = next ? next.split('-') : null;\r\n        while (j > 0) {\r\n            locale = loadLocale(split.slice(0, j).join('-'));\r\n            if (locale) {\r\n                return locale;\r\n            }\r\n            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {\r\n                // the next array item is better than a shallower substring of this one\r\n                break;\r\n            }\r\n            j--;\r\n        }\r\n        i++;\r\n    }\r\n    return null;\r\n}\r\nexport function mergeConfigs(parentConfig, childConfig) {\r\n    var res = Object.assign({}, parentConfig);\r\n    for (var childProp in childConfig) {\r\n        if (!hasOwnProp(childConfig, childProp)) {\r\n            continue;\r\n        }\r\n        if (isObject(parentConfig[childProp]) && isObject(childConfig[childProp])) {\r\n            res[childProp] = {};\r\n            Object.assign(res[childProp], parentConfig[childProp]);\r\n            Object.assign(res[childProp], childConfig[childProp]);\r\n        }\r\n        else if (childConfig[childProp] != null) {\r\n            res[childProp] = childConfig[childProp];\r\n        }\r\n        else {\r\n            delete res[childProp];\r\n        }\r\n    }\r\n    var parentProp;\r\n    for (parentProp in parentConfig) {\r\n        if (hasOwnProp(parentConfig, parentProp) &&\r\n            !hasOwnProp(childConfig, parentProp) &&\r\n            isObject(parentConfig[parentProp])) {\r\n            // make sure changes to properties don't modify parent config\r\n            res[parentProp] = Object.assign({}, res[parentProp]);\r\n        }\r\n    }\r\n    return res;\r\n}\r\nfunction loadLocale(name) {\r\n    // no way!\r\n    /* var oldLocale = null;\r\n       // TODO: Find a better way to register and load all the locales in Node\r\n       if (!locales[name] && (typeof module !== 'undefined') &&\r\n         module && module.exports) {\r\n         try {\r\n           oldLocale = globalLocale._abbr;\r\n           var aliasedRequire = require;\r\n           aliasedRequire('./locale/' + name);\r\n           getSetGlobalLocale(oldLocale);\r\n         } catch (e) {}\r\n       }*/\r\n    if (!locales[name]) {\r\n        // tslint:disable-next-line\r\n        console.error(\"Khronos locale error: please load locale \\\"\" + name + \"\\\" before using it\");\r\n        // throw new Error(`Khronos locale error: please load locale \"${name}\" before using it`);\r\n    }\r\n    return locales[name];\r\n}\r\n// This function will load locale and then set the global locale.  If\r\n// no arguments are passed in, it will simply return the current global\r\n// locale key.\r\nexport function getSetGlobalLocale(key, values) {\r\n    var data;\r\n    if (key) {\r\n        if (isUndefined(values)) {\r\n            data = getLocale(key);\r\n        }\r\n        else if (isString(key)) {\r\n            data = defineLocale(key, values);\r\n        }\r\n        if (data) {\r\n            globalLocale = data;\r\n        }\r\n    }\r\n    return globalLocale && globalLocale._abbr;\r\n}\r\nexport function defineLocale(name, config) {\r\n    if (config === null) {\r\n        // useful for testing\r\n        delete locales[name];\r\n        globalLocale = getLocale('en');\r\n        return null;\r\n    }\r\n    if (!config) {\r\n        return;\r\n    }\r\n    var parentConfig = baseConfig;\r\n    config.abbr = name;\r\n    if (config.parentLocale != null) {\r\n        if (locales[config.parentLocale] != null) {\r\n            parentConfig = locales[config.parentLocale]._config;\r\n        }\r\n        else {\r\n            if (!localeFamilies[config.parentLocale]) {\r\n                localeFamilies[config.parentLocale] = [];\r\n            }\r\n            localeFamilies[config.parentLocale].push({ name: name, config: config });\r\n            return null;\r\n        }\r\n    }\r\n    locales[name] = new Locale(mergeConfigs(parentConfig, config));\r\n    if (localeFamilies[name]) {\r\n        localeFamilies[name].forEach(function (x) {\r\n            defineLocale(x.name, x.config);\r\n        });\r\n    }\r\n    // backwards compat for now: also set the locale\r\n    // make sure we set the locale AFTER all child locales have been\r\n    // created, so we won't end up with the child locale set.\r\n    getSetGlobalLocale(name);\r\n    return locales[name];\r\n}\r\nexport function updateLocale(name, config) {\r\n    var _config = config;\r\n    if (_config != null) {\r\n        var parentConfig = baseConfig;\r\n        // MERGE\r\n        var tmpLocale = loadLocale(name);\r\n        if (tmpLocale != null) {\r\n            parentConfig = tmpLocale._config;\r\n        }\r\n        _config = mergeConfigs(parentConfig, _config);\r\n        var locale = new Locale(_config);\r\n        locale.parentLocale = locales[name];\r\n        locales[name] = locale;\r\n        // backwards compat for now: also set the locale\r\n        getSetGlobalLocale(name);\r\n    }\r\n    else {\r\n        // pass null for config to unupdate, useful for tests\r\n        if (locales[name] != null) {\r\n            if (locales[name].parentLocale != null) {\r\n                locales[name] = locales[name].parentLocale;\r\n            }\r\n            else if (locales[name] != null) {\r\n                delete locales[name];\r\n            }\r\n        }\r\n    }\r\n    return locales[name];\r\n}\r\n// returns locale data\r\nexport function getLocale(key) {\r\n    if (!key) {\r\n        return globalLocale;\r\n    }\r\n    // let locale;\r\n    var _key = isArray(key) ? key : [key];\r\n    return chooseLocale(_key);\r\n}\r\nexport function listLocales() {\r\n    return Object.keys(locales);\r\n}\r\n// define default locale\r\ngetSetGlobalLocale('en', {\r\n    dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,\r\n    ordinal: function (num) {\r\n        var b = num % 10;\r\n        var output = toInt((num % 100) / 10) === 1\r\n            ? 'th'\r\n            : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\r\n        return num + output;\r\n    }\r\n});\r\n//# sourceMappingURL=locales.js.map",null]}