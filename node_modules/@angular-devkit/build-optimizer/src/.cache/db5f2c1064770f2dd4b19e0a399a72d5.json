{"remainingRequest":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\chronos\\units\\millisecond.js","dependencies":[{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\chronos\\units\\millisecond.js","mtime":1676443216626},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676443201610},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1676443192566}],"contextDependencies":[],"result":["// tslint:disable:no-bitwise\r\n// FORMATTING\r\nimport { addFormatToken } from '../format/format';\r\nimport { addRegexToken, match1, match1to3, match2, match3, matchUnsigned } from '../parse/regex';\r\nimport { MILLISECOND } from './constants';\r\nimport { toInt } from '../utils/type-checks';\r\nimport { addParseToken } from '../parse/token';\r\nimport { addUnitAlias } from './aliases';\r\nimport { addUnitPriority } from './priorities';\r\nimport { getMilliseconds } from '../utils/date-getters';\r\naddFormatToken('S', null, null, function (date, opts) {\r\n    return (~~(getMilliseconds(date, opts.isUTC) / 100)).toString(10);\r\n});\r\naddFormatToken(null, ['SS', 2, false], null, function (date, opts) {\r\n    return (~~(getMilliseconds(date, opts.isUTC) / 10)).toString(10);\r\n});\r\naddFormatToken(null, ['SSS', 3, false], null, function (date, opts) {\r\n    return (getMilliseconds(date, opts.isUTC)).toString(10);\r\n});\r\naddFormatToken(null, ['SSSS', 4, false], null, function (date, opts) {\r\n    return (getMilliseconds(date, opts.isUTC) * 10).toString(10);\r\n});\r\naddFormatToken(null, ['SSSSS', 5, false], null, function (date, opts) {\r\n    return (getMilliseconds(date, opts.isUTC) * 100).toString(10);\r\n});\r\naddFormatToken(null, ['SSSSSS', 6, false], null, function (date, opts) {\r\n    return (getMilliseconds(date, opts.isUTC) * 1000).toString(10);\r\n});\r\naddFormatToken(null, ['SSSSSSS', 7, false], null, function (date, opts) {\r\n    return (getMilliseconds(date, opts.isUTC) * 10000).toString(10);\r\n});\r\naddFormatToken(null, ['SSSSSSSS', 8, false], null, function (date, opts) {\r\n    return (getMilliseconds(date, opts.isUTC) * 100000).toString(10);\r\n});\r\naddFormatToken(null, ['SSSSSSSSS', 9, false], null, function (date, opts) {\r\n    return (getMilliseconds(date, opts.isUTC) * 1000000).toString(10);\r\n});\r\n// ALIASES\r\naddUnitAlias('millisecond', 'ms');\r\n// PRIORITY\r\naddUnitPriority('millisecond', 16);\r\n// PARSING\r\naddRegexToken('S', match1to3, match1);\r\naddRegexToken('SS', match1to3, match2);\r\naddRegexToken('SSS', match1to3, match3);\r\nvar token;\r\nfor (token = 'SSSS'; token.length <= 9; token += 'S') {\r\n    addRegexToken(token, matchUnsigned);\r\n}\r\nfunction parseMs(input, array, config) {\r\n    array[MILLISECOND] = toInt(parseFloat(\"0.\" + input) * 1000);\r\n    return config;\r\n}\r\nfor (token = 'S'; token.length <= 9; token += 'S') {\r\n    addParseToken(token, parseMs);\r\n}\r\n// MOMENTS\r\n//# sourceMappingURL=millisecond.js.map",null]}