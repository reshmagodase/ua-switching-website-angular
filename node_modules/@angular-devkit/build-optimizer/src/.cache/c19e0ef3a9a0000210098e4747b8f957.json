{"remainingRequest":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\chronos\\units\\year.js","dependencies":[{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\chronos\\units\\year.js","mtime":1676443216666},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676443201610},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1676443192566}],"contextDependencies":[],"result":["import { addFormatToken } from '../format/format';\r\nimport { getFullYear } from '../utils/date-getters';\r\nimport { addRegexToken, match1to2, match1to4, match1to6, match2, match4, match6, matchSigned } from '../parse/regex';\r\nimport { addParseToken } from '../parse/token';\r\nimport { YEAR } from './constants';\r\nimport { toInt } from '../utils/type-checks';\r\nimport { addUnitPriority } from './priorities';\r\nimport { addUnitAlias } from './aliases';\r\n// FORMATTING\r\nfunction getYear(date, opts) {\r\n    return getFullYear(date, opts.isUTC).toString();\r\n}\r\naddFormatToken('Y', null, null, function (date, opts) {\r\n    var y = getFullYear(date, opts.isUTC);\r\n    return y <= 9999 ? y.toString(10) : \"+\" + y;\r\n});\r\naddFormatToken(null, ['YY', 2, false], null, function (date, opts) {\r\n    return (getFullYear(date, opts.isUTC) % 100).toString(10);\r\n});\r\naddFormatToken(null, ['YYYY', 4, false], null, getYear);\r\naddFormatToken(null, ['YYYYY', 5, false], null, getYear);\r\naddFormatToken(null, ['YYYYYY', 6, true], null, getYear);\r\n// ALIASES\r\naddUnitAlias('year', 'y');\r\n// PRIORITIES\r\naddUnitPriority('year', 1);\r\n// PARSING\r\naddRegexToken('Y', matchSigned);\r\naddRegexToken('YY', match1to2, match2);\r\naddRegexToken('YYYY', match1to4, match4);\r\naddRegexToken('YYYYY', match1to6, match6);\r\naddRegexToken('YYYYYY', match1to6, match6);\r\naddParseToken(['YYYYY', 'YYYYYY'], YEAR);\r\naddParseToken('YYYY', function (input, array, config) {\r\n    array[YEAR] = input.length === 2 ? parseTwoDigitYear(input) : toInt(input);\r\n    return config;\r\n});\r\naddParseToken('YY', function (input, array, config) {\r\n    array[YEAR] = parseTwoDigitYear(input);\r\n    return config;\r\n});\r\naddParseToken('Y', function (input, array, config) {\r\n    array[YEAR] = parseInt(input, 10);\r\n    return config;\r\n});\r\nexport function parseTwoDigitYear(input) {\r\n    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\r\n}\r\nexport function daysInYear(year) {\r\n    return isLeapYear(year) ? 366 : 365;\r\n}\r\nexport function isLeapYear(year) {\r\n    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\r\n}\r\n//# sourceMappingURL=year.js.map",null]}