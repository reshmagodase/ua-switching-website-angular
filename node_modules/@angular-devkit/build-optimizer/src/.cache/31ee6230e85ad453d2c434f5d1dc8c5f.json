{"remainingRequest":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\chronos\\locale\\locale.class.js","dependencies":[{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\chronos\\locale\\locale.class.js","mtime":1676443216537},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676443201610},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1676443192566}],"contextDependencies":[],"result":["// tslint:disable:max-file-line-count max-line-length cyclomatic-complexity\r\nimport { weekOfYear } from '../units/week-calendar-utils';\r\nimport { hasOwnProp, isArray, isFunction } from '../utils/type-checks';\r\nimport { getDay, getMonth } from '../utils/date-getters';\r\nimport { matchWord, regexEscape } from '../parse/regex';\r\nimport { setDayOfWeek } from '../units/day-of-week';\r\nvar MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/;\r\nexport var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\r\nexport var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');\r\nexport var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');\r\nexport var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');\r\nexport var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');\r\nexport var defaultLongDateFormat = {\r\n    LTS: 'h:mm:ss A',\r\n    LT: 'h:mm A',\r\n    L: 'MM/DD/YYYY',\r\n    LL: 'MMMM D, YYYY',\r\n    LLL: 'MMMM D, YYYY h:mm A',\r\n    LLLL: 'dddd, MMMM D, YYYY h:mm A'\r\n};\r\nexport var defaultOrdinal = '%d';\r\nexport var defaultDayOfMonthOrdinalParse = /\\d{1,2}/;\r\nvar defaultMonthsShortRegex = matchWord;\r\nvar defaultMonthsRegex = matchWord;\r\nvar Locale = /** @class */ /*@__PURE__*/ (function () {\r\n    function Locale(config) {\r\n        if (!!config) {\r\n            this.set(config);\r\n        }\r\n    }\r\n    Locale.prototype.set = function (config) {\r\n        var confKey;\r\n        for (confKey in config) {\r\n            if (!config.hasOwnProperty(confKey)) {\r\n                continue;\r\n            }\r\n            var prop = config[confKey];\r\n            var key = (isFunction(prop) ? confKey : \"_\" + confKey);\r\n            this[key] = prop;\r\n        }\r\n        this._config = config;\r\n    };\r\n    Locale.prototype.calendar = function (key, date, now) {\r\n        var output = this._calendar[key] || this._calendar.sameElse;\r\n        return isFunction(output) ? output.call(null, date, now) : output;\r\n    };\r\n    Locale.prototype.longDateFormat = function (key) {\r\n        var format = this._longDateFormat[key];\r\n        var formatUpper = this._longDateFormat[key.toUpperCase()];\r\n        if (format || !formatUpper) {\r\n            return format;\r\n        }\r\n        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {\r\n            return val.slice(1);\r\n        });\r\n        return this._longDateFormat[key];\r\n    };\r\n    Object.defineProperty(Locale.prototype, \"invalidDate\", {\r\n        get: function () {\r\n            return this._invalidDate;\r\n        },\r\n        set: function (val) {\r\n            this._invalidDate = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Locale.prototype.ordinal = function (num, token) {\r\n        return this._ordinal.replace('%d', num.toString(10));\r\n    };\r\n    Locale.prototype.preparse = function (str) {\r\n        return str;\r\n    };\r\n    Locale.prototype.postformat = function (str) {\r\n        return str;\r\n    };\r\n    Locale.prototype.relativeTime = function (num, withoutSuffix, str, isFuture) {\r\n        var output = this._relativeTime[str];\r\n        return (isFunction(output)) ?\r\n            output(num, withoutSuffix, str, isFuture) :\r\n            output.replace(/%d/i, num.toString(10));\r\n    };\r\n    Locale.prototype.pastFuture = function (diff, output) {\r\n        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\r\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);\r\n    };\r\n    Locale.prototype.months = function (date, format, isUTC) {\r\n        if (isUTC === void 0) {\r\n            isUTC = false;\r\n        }\r\n        if (!date) {\r\n            return isArray(this._months)\r\n                ? this._months\r\n                : this._months.standalone;\r\n        }\r\n        if (isArray(this._months)) {\r\n            return this._months[getMonth(date, isUTC)];\r\n        }\r\n        var key = (this._months.isFormat || MONTHS_IN_FORMAT).test(format)\r\n            ? 'format'\r\n            : 'standalone';\r\n        return this._months[key][getMonth(date, isUTC)];\r\n    };\r\n    Locale.prototype.monthsShort = function (date, format, isUTC) {\r\n        if (isUTC === void 0) {\r\n            isUTC = false;\r\n        }\r\n        if (!date) {\r\n            return isArray(this._monthsShort)\r\n                ? this._monthsShort\r\n                : this._monthsShort.standalone;\r\n        }\r\n        if (isArray(this._monthsShort)) {\r\n            return this._monthsShort[getMonth(date, isUTC)];\r\n        }\r\n        var key = MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone';\r\n        return this._monthsShort[key][getMonth(date, isUTC)];\r\n    };\r\n    Locale.prototype.monthsParse = function (monthName, format, strict) {\r\n        var date;\r\n        var regex;\r\n        if (this._monthsParseExact) {\r\n            return this.handleMonthStrictParse(monthName, format, strict);\r\n        }\r\n        if (!this._monthsParse) {\r\n            this._monthsParse = [];\r\n            this._longMonthsParse = [];\r\n            this._shortMonthsParse = [];\r\n        }\r\n        // TODO: add sorting\r\n        // Sorting makes sure if one month (or abbr) is a prefix of another\r\n        // see sorting in computeMonthsParse\r\n        var i;\r\n        for (i = 0; i < 12; i++) {\r\n            // make the regex if we don't have it already\r\n            date = new Date(Date.UTC(2000, i));\r\n            if (strict && !this._longMonthsParse[i]) {\r\n                var _months = this.months(date, '', true).replace('.', '');\r\n                var _shortMonths = this.monthsShort(date, '', true).replace('.', '');\r\n                this._longMonthsParse[i] = new RegExp(\"^\" + _months + \"$\", 'i');\r\n                this._shortMonthsParse[i] = new RegExp(\"^\" + _shortMonths + \"$\", 'i');\r\n            }\r\n            if (!strict && !this._monthsParse[i]) {\r\n                regex = \"^\" + this.months(date, '', true) + \"|^\" + this.monthsShort(date, '', true);\r\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\r\n            }\r\n            // test the regex\r\n            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {\r\n                return i;\r\n            }\r\n            if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {\r\n                return i;\r\n            }\r\n            if (!strict && this._monthsParse[i].test(monthName)) {\r\n                return i;\r\n            }\r\n        }\r\n    };\r\n    Locale.prototype.monthsRegex = function (isStrict) {\r\n        if (this._monthsParseExact) {\r\n            if (!hasOwnProp(this, '_monthsRegex')) {\r\n                this.computeMonthsParse();\r\n            }\r\n            if (isStrict) {\r\n                return this._monthsStrictRegex;\r\n            }\r\n            return this._monthsRegex;\r\n        }\r\n        if (!hasOwnProp(this, '_monthsRegex')) {\r\n            this._monthsRegex = defaultMonthsRegex;\r\n        }\r\n        return this._monthsStrictRegex && isStrict ?\r\n            this._monthsStrictRegex : this._monthsRegex;\r\n    };\r\n    Locale.prototype.monthsShortRegex = function (isStrict) {\r\n        if (this._monthsParseExact) {\r\n            if (!hasOwnProp(this, '_monthsRegex')) {\r\n                this.computeMonthsParse();\r\n            }\r\n            if (isStrict) {\r\n                return this._monthsShortStrictRegex;\r\n            }\r\n            return this._monthsShortRegex;\r\n        }\r\n        if (!hasOwnProp(this, '_monthsShortRegex')) {\r\n            this._monthsShortRegex = defaultMonthsShortRegex;\r\n        }\r\n        return this._monthsShortStrictRegex && isStrict ?\r\n            this._monthsShortStrictRegex : this._monthsShortRegex;\r\n    };\r\n    /** Week */\r\n    /** Week */\r\n    Locale.prototype.week = /** Week */\r\n        function (date, isUTC) {\r\n            return weekOfYear(date, this._week.dow, this._week.doy, isUTC).week;\r\n        };\r\n    Locale.prototype.firstDayOfWeek = function () {\r\n        return this._week.dow;\r\n    };\r\n    Locale.prototype.firstDayOfYear = function () {\r\n        return this._week.doy;\r\n    };\r\n    Locale.prototype.weekdays = function (date, format, isUTC) {\r\n        if (!date) {\r\n            return isArray(this._weekdays)\r\n                ? this._weekdays\r\n                : this._weekdays.standalone;\r\n        }\r\n        if (isArray(this._weekdays)) {\r\n            return this._weekdays[getDay(date, isUTC)];\r\n        }\r\n        var _key = this._weekdays.isFormat.test(format)\r\n            ? 'format'\r\n            : 'standalone';\r\n        return this._weekdays[_key][getDay(date, isUTC)];\r\n    };\r\n    Locale.prototype.weekdaysMin = function (date, format, isUTC) {\r\n        return date ? this._weekdaysMin[getDay(date, isUTC)] : this._weekdaysMin;\r\n    };\r\n    Locale.prototype.weekdaysShort = function (date, format, isUTC) {\r\n        return date ? this._weekdaysShort[getDay(date, isUTC)] : this._weekdaysShort;\r\n    };\r\n    // proto.weekdaysParse  =        localeWeekdaysParse;\r\n    // proto.weekdaysParse  =        localeWeekdaysParse;\r\n    Locale.prototype.weekdaysParse =\r\n        // proto.weekdaysParse  =        localeWeekdaysParse;\r\n        function (weekdayName, format, strict) {\r\n            var i;\r\n            var regex;\r\n            if (this._weekdaysParseExact) {\r\n                return this.handleWeekStrictParse(weekdayName, format, strict);\r\n            }\r\n            if (!this._weekdaysParse) {\r\n                this._weekdaysParse = [];\r\n                this._minWeekdaysParse = [];\r\n                this._shortWeekdaysParse = [];\r\n                this._fullWeekdaysParse = [];\r\n            }\r\n            for (i = 0; i < 7; i++) {\r\n                // make the regex if we don't have it already\r\n                // fix: here is the issue\r\n                var date = setDayOfWeek(new Date(Date.UTC(2000, 1)), i, null, true);\r\n                if (strict && !this._fullWeekdaysParse[i]) {\r\n                    this._fullWeekdaysParse[i] = new RegExp(\"^\" + this.weekdays(date, '', true).replace('.', '\\.?') + \"$\", 'i');\r\n                    this._shortWeekdaysParse[i] = new RegExp(\"^\" + this.weekdaysShort(date, '', true).replace('.', '\\.?') + \"$\", 'i');\r\n                    this._minWeekdaysParse[i] = new RegExp(\"^\" + this.weekdaysMin(date, '', true).replace('.', '\\.?') + \"$\", 'i');\r\n                }\r\n                if (!this._weekdaysParse[i]) {\r\n                    regex = \"^\" + this.weekdays(date, '', true) + \"|^\" + this.weekdaysShort(date, '', true) + \"|^\" + this.weekdaysMin(date, '', true);\r\n                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\r\n                }\r\n                if (!isArray(this._fullWeekdaysParse)\r\n                    || !isArray(this._shortWeekdaysParse)\r\n                    || !isArray(this._minWeekdaysParse)\r\n                    || !isArray(this._weekdaysParse)) {\r\n                    return;\r\n                }\r\n                // test the regex\r\n                if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {\r\n                    return i;\r\n                }\r\n                else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {\r\n                    return i;\r\n                }\r\n                else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {\r\n                    return i;\r\n                }\r\n                else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\r\n                    return i;\r\n                }\r\n            }\r\n        };\r\n    // proto.weekdaysRegex       =        weekdaysRegex;\r\n    // proto.weekdaysRegex       =        weekdaysRegex;\r\n    Locale.prototype.weekdaysRegex =\r\n        // proto.weekdaysRegex       =        weekdaysRegex;\r\n        function (isStrict) {\r\n            if (this._weekdaysParseExact) {\r\n                if (!hasOwnProp(this, '_weekdaysRegex')) {\r\n                    this.computeWeekdaysParse();\r\n                }\r\n                if (isStrict) {\r\n                    return this._weekdaysStrictRegex;\r\n                }\r\n                else {\r\n                    return this._weekdaysRegex;\r\n                }\r\n            }\r\n            else {\r\n                if (!hasOwnProp(this, '_weekdaysRegex')) {\r\n                    this._weekdaysRegex = matchWord;\r\n                }\r\n                return this._weekdaysStrictRegex && isStrict ?\r\n                    this._weekdaysStrictRegex : this._weekdaysRegex;\r\n            }\r\n        };\r\n    // proto.weekdaysShortRegex  =        weekdaysShortRegex;\r\n    // proto.weekdaysMinRegex    =        weekdaysMinRegex;\r\n    // proto.weekdaysShortRegex  =        weekdaysShortRegex;\r\n    // proto.weekdaysMinRegex    =        weekdaysMinRegex;\r\n    Locale.prototype.weekdaysShortRegex =\r\n        // proto.weekdaysShortRegex  =        weekdaysShortRegex;\r\n        // proto.weekdaysMinRegex    =        weekdaysMinRegex;\r\n        function (isStrict) {\r\n            if (this._weekdaysParseExact) {\r\n                if (!hasOwnProp(this, '_weekdaysRegex')) {\r\n                    this.computeWeekdaysParse();\r\n                }\r\n                if (isStrict) {\r\n                    return this._weekdaysShortStrictRegex;\r\n                }\r\n                else {\r\n                    return this._weekdaysShortRegex;\r\n                }\r\n            }\r\n            else {\r\n                if (!hasOwnProp(this, '_weekdaysShortRegex')) {\r\n                    this._weekdaysShortRegex = matchWord;\r\n                }\r\n                return this._weekdaysShortStrictRegex && isStrict ?\r\n                    this._weekdaysShortStrictRegex : this._weekdaysShortRegex;\r\n            }\r\n        };\r\n    Locale.prototype.weekdaysMinRegex = function (isStrict) {\r\n        if (this._weekdaysParseExact) {\r\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\r\n                this.computeWeekdaysParse();\r\n            }\r\n            if (isStrict) {\r\n                return this._weekdaysMinStrictRegex;\r\n            }\r\n            else {\r\n                return this._weekdaysMinRegex;\r\n            }\r\n        }\r\n        else {\r\n            if (!hasOwnProp(this, '_weekdaysMinRegex')) {\r\n                this._weekdaysMinRegex = matchWord;\r\n            }\r\n            return this._weekdaysMinStrictRegex && isStrict ?\r\n                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;\r\n        }\r\n    };\r\n    Locale.prototype.isPM = function (input) {\r\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\r\n        // Using charAt should be more compatible.\r\n        return input.toLowerCase().charAt(0) === 'p';\r\n    };\r\n    Locale.prototype.meridiem = function (hours, minutes, isLower) {\r\n        if (hours > 11) {\r\n            return isLower ? 'pm' : 'PM';\r\n        }\r\n        return isLower ? 'am' : 'AM';\r\n    };\r\n    Locale.prototype.formatLongDate = function (key) {\r\n        this._longDateFormat = this._longDateFormat ? this._longDateFormat : defaultLongDateFormat;\r\n        var format = this._longDateFormat[key];\r\n        var formatUpper = this._longDateFormat[key.toUpperCase()];\r\n        if (format || !formatUpper) {\r\n            return format;\r\n        }\r\n        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {\r\n            return val.slice(1);\r\n        });\r\n        return this._longDateFormat[key];\r\n    };\r\n    Locale.prototype.handleMonthStrictParse = function (monthName, format, strict) {\r\n        var llc = monthName.toLocaleLowerCase();\r\n        var i;\r\n        var ii;\r\n        var mom;\r\n        if (!this._monthsParse) {\r\n            // this is not used\r\n            this._monthsParse = [];\r\n            this._longMonthsParse = [];\r\n            this._shortMonthsParse = [];\r\n            for (i = 0; i < 12; ++i) {\r\n                mom = new Date(2000, i);\r\n                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();\r\n                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\r\n            }\r\n        }\r\n        if (strict) {\r\n            if (format === 'MMM') {\r\n                ii = this._shortMonthsParse.indexOf(llc);\r\n                return ii !== -1 ? ii : null;\r\n            }\r\n            ii = this._longMonthsParse.indexOf(llc);\r\n            return ii !== -1 ? ii : null;\r\n        }\r\n        if (format === 'MMM') {\r\n            ii = this._shortMonthsParse.indexOf(llc);\r\n            if (ii !== -1) {\r\n                return ii;\r\n            }\r\n            ii = this._longMonthsParse.indexOf(llc);\r\n            return ii !== -1 ? ii : null;\r\n        }\r\n        ii = this._longMonthsParse.indexOf(llc);\r\n        if (ii !== -1) {\r\n            return ii;\r\n        }\r\n        ii = this._shortMonthsParse.indexOf(llc);\r\n        return ii !== -1 ? ii : null;\r\n    };\r\n    Locale.prototype.handleWeekStrictParse = function (weekdayName, format, strict) {\r\n        var ii;\r\n        var llc = weekdayName.toLocaleLowerCase();\r\n        if (!this._weekdaysParse) {\r\n            this._weekdaysParse = [];\r\n            this._shortWeekdaysParse = [];\r\n            this._minWeekdaysParse = [];\r\n            var i = void 0;\r\n            for (i = 0; i < 7; ++i) {\r\n                var date = setDayOfWeek(new Date(Date.UTC(2000, 1)), i, null, true);\r\n                this._minWeekdaysParse[i] = this.weekdaysMin(date).toLocaleLowerCase();\r\n                this._shortWeekdaysParse[i] = this.weekdaysShort(date).toLocaleLowerCase();\r\n                this._weekdaysParse[i] = this.weekdays(date, '').toLocaleLowerCase();\r\n            }\r\n        }\r\n        if (!isArray(this._weekdaysParse)\r\n            || !isArray(this._shortWeekdaysParse)\r\n            || !isArray(this._minWeekdaysParse)) {\r\n            return;\r\n        }\r\n        if (strict) {\r\n            if (format === 'dddd') {\r\n                ii = this._weekdaysParse.indexOf(llc);\r\n                return ii !== -1 ? ii : null;\r\n            }\r\n            else if (format === 'ddd') {\r\n                ii = this._shortWeekdaysParse.indexOf(llc);\r\n                return ii !== -1 ? ii : null;\r\n            }\r\n            else {\r\n                ii = this._minWeekdaysParse.indexOf(llc);\r\n                return ii !== -1 ? ii : null;\r\n            }\r\n        }\r\n        else {\r\n            if (format === 'dddd') {\r\n                ii = this._weekdaysParse.indexOf(llc);\r\n                if (ii !== -1) {\r\n                    return ii;\r\n                }\r\n                ii = this._shortWeekdaysParse.indexOf(llc);\r\n                if (ii !== -1) {\r\n                    return ii;\r\n                }\r\n                ii = this._minWeekdaysParse.indexOf(llc);\r\n                return ii !== -1 ? ii : null;\r\n            }\r\n            else if (format === 'ddd') {\r\n                ii = this._shortWeekdaysParse.indexOf(llc);\r\n                if (ii !== -1) {\r\n                    return ii;\r\n                }\r\n                ii = this._weekdaysParse.indexOf(llc);\r\n                if (ii !== -1) {\r\n                    return ii;\r\n                }\r\n                ii = this._minWeekdaysParse.indexOf(llc);\r\n                return ii !== -1 ? ii : null;\r\n            }\r\n            else {\r\n                ii = this._minWeekdaysParse.indexOf(llc);\r\n                if (ii !== -1) {\r\n                    return ii;\r\n                }\r\n                ii = this._weekdaysParse.indexOf(llc);\r\n                if (ii !== -1) {\r\n                    return ii;\r\n                }\r\n                ii = this._shortWeekdaysParse.indexOf(llc);\r\n                return ii !== -1 ? ii : null;\r\n            }\r\n        }\r\n    };\r\n    Locale.prototype.computeMonthsParse = function () {\r\n        var shortPieces = [];\r\n        var longPieces = [];\r\n        var mixedPieces = [];\r\n        var date;\r\n        var i;\r\n        for (i = 0; i < 12; i++) {\r\n            // make the regex if we don't have it already\r\n            date = new Date(2000, i);\r\n            shortPieces.push(this.monthsShort(date, ''));\r\n            longPieces.push(this.months(date, ''));\r\n            mixedPieces.push(this.months(date, ''));\r\n            mixedPieces.push(this.monthsShort(date, ''));\r\n        }\r\n        // Sorting makes sure if one month (or abbr) is a prefix of another it\r\n        // will match the longer piece.\r\n        shortPieces.sort(cmpLenRev);\r\n        longPieces.sort(cmpLenRev);\r\n        mixedPieces.sort(cmpLenRev);\r\n        for (i = 0; i < 12; i++) {\r\n            shortPieces[i] = regexEscape(shortPieces[i]);\r\n            longPieces[i] = regexEscape(longPieces[i]);\r\n        }\r\n        for (i = 0; i < 24; i++) {\r\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\r\n        }\r\n        this._monthsRegex = new RegExp(\"^(\" + mixedPieces.join('|') + \")\", 'i');\r\n        this._monthsShortRegex = this._monthsRegex;\r\n        this._monthsStrictRegex = new RegExp(\"^(\" + longPieces.join('|') + \")\", 'i');\r\n        this._monthsShortStrictRegex = new RegExp(\"^(\" + shortPieces.join('|') + \")\", 'i');\r\n    };\r\n    Locale.prototype.computeWeekdaysParse = function () {\r\n        var minPieces = [];\r\n        var shortPieces = [];\r\n        var longPieces = [];\r\n        var mixedPieces = [];\r\n        var i;\r\n        for (i = 0; i < 7; i++) {\r\n            // make the regex if we don't have it already\r\n            // let mom = createUTC([2000, 1]).day(i);\r\n            var date = setDayOfWeek(new Date(Date.UTC(2000, 1)), i, null, true);\r\n            var minp = this.weekdaysMin(date);\r\n            var shortp = this.weekdaysShort(date);\r\n            var longp = this.weekdays(date);\r\n            minPieces.push(minp);\r\n            shortPieces.push(shortp);\r\n            longPieces.push(longp);\r\n            mixedPieces.push(minp);\r\n            mixedPieces.push(shortp);\r\n            mixedPieces.push(longp);\r\n        }\r\n        // Sorting makes sure if one weekday (or abbr) is a prefix of another it\r\n        // will match the longer piece.\r\n        minPieces.sort(cmpLenRev);\r\n        shortPieces.sort(cmpLenRev);\r\n        longPieces.sort(cmpLenRev);\r\n        mixedPieces.sort(cmpLenRev);\r\n        for (i = 0; i < 7; i++) {\r\n            shortPieces[i] = regexEscape(shortPieces[i]);\r\n            longPieces[i] = regexEscape(longPieces[i]);\r\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\r\n        }\r\n        this._weekdaysRegex = new RegExp(\"^(\" + mixedPieces.join('|') + \")\", 'i');\r\n        this._weekdaysShortRegex = this._weekdaysRegex;\r\n        this._weekdaysMinRegex = this._weekdaysRegex;\r\n        this._weekdaysStrictRegex = new RegExp(\"^(\" + longPieces.join('|') + \")\", 'i');\r\n        this._weekdaysShortStrictRegex = new RegExp(\"^(\" + shortPieces.join('|') + \")\", 'i');\r\n        this._weekdaysMinStrictRegex = new RegExp(\"^(\" + minPieces.join('|') + \")\", 'i');\r\n    };\r\n    return Locale;\r\n}());\r\nexport { Locale };\r\nfunction cmpLenRev(a, b) {\r\n    return b.length - a.length;\r\n}\r\n//# sourceMappingURL=locale.class.js.map\r\n",null]}