{"remainingRequest":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\chronos\\duration\\constructor.js","dependencies":[{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\chronos\\duration\\constructor.js","mtime":1676443216339},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676443201610},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1676443192566}],"contextDependencies":[],"result":["import { getLocale } from '../locale/locales';\r\nimport { isDurationValid } from './valid';\r\nimport { bubble, daysToMonths, monthsToDays } from './bubble';\r\nimport { normalizeUnits } from '../units/aliases';\r\nimport { relativeTime } from './humanize';\r\nimport { toInt } from '../utils/type-checks';\r\nvar Duration = /** @class */ /*@__PURE__*/ (function () {\r\n    function Duration(duration, config) {\r\n        if (config === void 0) {\r\n            config = {};\r\n        }\r\n        this._data = {};\r\n        this._locale = getLocale();\r\n        this._locale = config && config._locale || getLocale();\r\n        // const normalizedInput = normalizeObjectUnits(duration);\r\n        var normalizedInput = duration;\r\n        var years = normalizedInput.year || 0;\r\n        var quarters = normalizedInput.quarter || 0;\r\n        var months = normalizedInput.month || 0;\r\n        var weeks = normalizedInput.week || 0;\r\n        var days = normalizedInput.day || 0;\r\n        var hours = normalizedInput.hours || 0;\r\n        var minutes = normalizedInput.minutes || 0;\r\n        var seconds = normalizedInput.seconds || 0;\r\n        var milliseconds = normalizedInput.milliseconds || 0;\r\n        this._isValid = isDurationValid(normalizedInput);\r\n        // representation for dateAddRemove\r\n        this._milliseconds = +milliseconds +\r\n            seconds * 1000 +\r\n            minutes * 60 * 1000 + // 1000 * 60\r\n            // 1000 * 60\r\n            hours * 1000 * 60 * 60; // using 1000 * 60 * 60\r\n        // instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\r\n        // Because of dateAddRemove treats 24 hours as different from a\r\n        // day when working around DST, we need to store them separately\r\n        this._days = +days +\r\n            weeks * 7;\r\n        // It is impossible to translate months into days without knowing\r\n        // which months you are are talking about, so we have to store\r\n        // it separately.\r\n        this._months = +months +\r\n            quarters * 3 +\r\n            years * 12;\r\n        // this._data = {};\r\n        // this._locale = getLocale();\r\n        // this._bubble();\r\n        return bubble(this);\r\n    }\r\n    Duration.prototype.isValid = function () {\r\n        return this._isValid;\r\n    };\r\n    Duration.prototype.humanize = function (withSuffix) {\r\n        // throw new Error(`TODO: implement`);\r\n        if (!this.isValid()) {\r\n            return this.localeData().invalidDate;\r\n        }\r\n        var locale = this.localeData();\r\n        var output = relativeTime(this, !withSuffix, locale);\r\n        if (withSuffix) {\r\n            output = locale.pastFuture(+this, output);\r\n        }\r\n        return locale.postformat(output);\r\n    };\r\n    Duration.prototype.localeData = function () {\r\n        return this._locale;\r\n    };\r\n    Duration.prototype.locale = function (localeKey) {\r\n        if (!localeKey) {\r\n            return this._locale._abbr;\r\n        }\r\n        this._locale = getLocale(localeKey) || this._locale;\r\n        return this;\r\n    };\r\n    Duration.prototype.abs = function () {\r\n        var mathAbs = Math.abs;\r\n        var data = this._data;\r\n        this._milliseconds = mathAbs(this._milliseconds);\r\n        this._days = mathAbs(this._days);\r\n        this._months = mathAbs(this._months);\r\n        data.milliseconds = mathAbs(data.milliseconds);\r\n        data.seconds = mathAbs(data.seconds);\r\n        data.minutes = mathAbs(data.minutes);\r\n        data.hours = mathAbs(data.hours);\r\n        data.month = mathAbs(data.month);\r\n        data.year = mathAbs(data.year);\r\n        return this;\r\n    };\r\n    Duration.prototype.as = function (_units) {\r\n        if (!this.isValid()) {\r\n            return NaN;\r\n        }\r\n        var days;\r\n        var months;\r\n        var milliseconds = this._milliseconds;\r\n        var units = normalizeUnits(_units);\r\n        if (units === 'month' || units === 'year') {\r\n            days = this._days + milliseconds / 864e5;\r\n            months = this._months + daysToMonths(days);\r\n            return units === 'month' ? months : months / 12;\r\n        }\r\n        // handle milliseconds separately because of floating point math errors (issue #1867)\r\n        days = this._days + Math.round(monthsToDays(this._months));\r\n        switch (units) {\r\n            case 'week':\r\n                return days / 7 + milliseconds / 6048e5;\r\n            case 'day':\r\n                return days + milliseconds / 864e5;\r\n            case 'hours':\r\n                return days * 24 + milliseconds / 36e5;\r\n            case 'minutes':\r\n                return days * 1440 + milliseconds / 6e4;\r\n            case 'seconds':\r\n                return days * 86400 + milliseconds / 1000;\r\n            // Math.floor prevents floating point math errors here\r\n            case 'milliseconds':\r\n                return Math.floor(days * 864e5) + milliseconds;\r\n            default:\r\n                throw new Error(\"Unknown unit \" + units);\r\n        }\r\n    };\r\n    Duration.prototype.valueOf = function () {\r\n        if (!this.isValid()) {\r\n            return NaN;\r\n        }\r\n        return (this._milliseconds +\r\n            this._days * 864e5 +\r\n            (this._months % 12) * 2592e6 +\r\n            toInt(this._months / 12) * 31536e6);\r\n    };\r\n    return Duration;\r\n}());\r\nexport { Duration };\r\nexport function isDuration(obj) {\r\n    return obj instanceof Duration;\r\n}\r\n//# sourceMappingURL=constructor.js.map\r\n",null]}