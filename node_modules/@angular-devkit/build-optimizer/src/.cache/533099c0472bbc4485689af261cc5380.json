{"remainingRequest":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\classlist.js\\classList.js","dependencies":[{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\classlist.js\\classList.js","mtime":1676443202505},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676443201610},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1676443192566}],"contextDependencies":[],"result":["/*\r\n * classList.js: Cross-browser full element.classList implementation.\r\n * 1.1.20150312\r\n *\r\n * By Eli Grey, http://eligrey.com\r\n * License: Dedicated to the public domain.\r\n *   See https://github.com/eligrey/classList.js/blob/master/LICENSE.md\r\n */\r\n\r\n/*global self, document, DOMException */\r\n\r\n/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js */\r\n\r\nif (\"document\" in self) {\r\n\r\n// Full polyfill for browsers with no classList support\r\n// Including IE < Edge missing SVGElement.classList\r\nif (!(\"classList\" in document.createElement(\"_\")) \r\n\t|| document.createElementNS && !(\"classList\" in document.createElementNS(\"http://www.w3.org/2000/svg\",\"g\"))) {\r\n\r\n(function (view) {\r\n\r\n\"use strict\";\r\n\r\nif (!('Element' in view)) return;\r\n\r\nvar\r\n\t  classListProp = \"classList\"\r\n\t, protoProp = \"prototype\"\r\n\t, elemCtrProto = view.Element[protoProp]\r\n\t, objCtr = Object\r\n\t, strTrim = String[protoProp].trim || function () {\r\n\t\treturn this.replace(/^\\s+|\\s+$/g, \"\");\r\n\t}\r\n\t, arrIndexOf = Array[protoProp].indexOf || function (item) {\r\n\t\tvar\r\n\t\t\t  i = 0\r\n\t\t\t, len = this.length\r\n\t\t;\r\n\t\tfor (; i < len; i++) {\r\n\t\t\tif (i in this && this[i] === item) {\r\n\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\t// Vendors: please allow content code to instantiate DOMExceptions\r\n\t, DOMEx = function (type, message) {\r\n\t\tthis.name = type;\r\n\t\tthis.code = DOMException[type];\r\n\t\tthis.message = message;\r\n\t}\r\n\t, checkTokenAndGetIndex = function (classList, token) {\r\n\t\tif (token === \"\") {\r\n\t\t\tthrow new DOMEx(\r\n\t\t\t\t  \"SYNTAX_ERR\"\r\n\t\t\t\t, \"An invalid or illegal string was specified\"\r\n\t\t\t);\r\n\t\t}\r\n\t\tif (/\\s/.test(token)) {\r\n\t\t\tthrow new DOMEx(\r\n\t\t\t\t  \"INVALID_CHARACTER_ERR\"\r\n\t\t\t\t, \"String contains an invalid character\"\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn arrIndexOf.call(classList, token);\r\n\t}\r\n\t, ClassList = function (elem) {\r\n\t\tvar\r\n\t\t\t  trimmedClasses = strTrim.call(elem.getAttribute(\"class\") || \"\")\r\n\t\t\t, classes = trimmedClasses ? trimmedClasses.split(/\\s+/) : []\r\n\t\t\t, i = 0\r\n\t\t\t, len = classes.length\r\n\t\t;\r\n\t\tfor (; i < len; i++) {\r\n\t\t\tthis.push(classes[i]);\r\n\t\t}\r\n\t\tthis._updateClassName = function () {\r\n\t\t\telem.setAttribute(\"class\", this.toString());\r\n\t\t};\r\n\t}\r\n\t, classListProto = ClassList[protoProp] = []\r\n\t, classListGetter = function () {\r\n\t\treturn new ClassList(this);\r\n\t}\r\n;\r\n// Most DOMException implementations don't allow calling DOMException's toString()\r\n// on non-DOMExceptions. Error's toString() is sufficient here.\r\nDOMEx[protoProp] = Error[protoProp];\r\nclassListProto.item = function (i) {\r\n\treturn this[i] || null;\r\n};\r\nclassListProto.contains = function (token) {\r\n\ttoken += \"\";\r\n\treturn checkTokenAndGetIndex(this, token) !== -1;\r\n};\r\nclassListProto.add = function () {\r\n\tvar\r\n\t\t  tokens = arguments\r\n\t\t, i = 0\r\n\t\t, l = tokens.length\r\n\t\t, token\r\n\t\t, updated = false\r\n\t;\r\n\tdo {\r\n\t\ttoken = tokens[i] + \"\";\r\n\t\tif (checkTokenAndGetIndex(this, token) === -1) {\r\n\t\t\tthis.push(token);\r\n\t\t\tupdated = true;\r\n\t\t}\r\n\t}\r\n\twhile (++i < l);\r\n\r\n\tif (updated) {\r\n\t\tthis._updateClassName();\r\n\t}\r\n};\r\nclassListProto.remove = function () {\r\n\tvar\r\n\t\t  tokens = arguments\r\n\t\t, i = 0\r\n\t\t, l = tokens.length\r\n\t\t, token\r\n\t\t, updated = false\r\n\t\t, index\r\n\t;\r\n\tdo {\r\n\t\ttoken = tokens[i] + \"\";\r\n\t\tindex = checkTokenAndGetIndex(this, token);\r\n\t\twhile (index !== -1) {\r\n\t\t\tthis.splice(index, 1);\r\n\t\t\tupdated = true;\r\n\t\t\tindex = checkTokenAndGetIndex(this, token);\r\n\t\t}\r\n\t}\r\n\twhile (++i < l);\r\n\r\n\tif (updated) {\r\n\t\tthis._updateClassName();\r\n\t}\r\n};\r\nclassListProto.toggle = function (token, force) {\r\n\ttoken += \"\";\r\n\r\n\tvar\r\n\t\t  result = this.contains(token)\r\n\t\t, method = result ?\r\n\t\t\tforce !== true && \"remove\"\r\n\t\t:\r\n\t\t\tforce !== false && \"add\"\r\n\t;\r\n\r\n\tif (method) {\r\n\t\tthis[method](token);\r\n\t}\r\n\r\n\tif (force === true || force === false) {\r\n\t\treturn force;\r\n\t} else {\r\n\t\treturn !result;\r\n\t}\r\n};\r\nclassListProto.toString = function () {\r\n\treturn this.join(\" \");\r\n};\r\n\r\nif (objCtr.defineProperty) {\r\n\tvar classListPropDesc = {\r\n\t\t  get: classListGetter\r\n\t\t, enumerable: true\r\n\t\t, configurable: true\r\n\t};\r\n\ttry {\r\n\t\tobjCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);\r\n\t} catch (ex) { // IE 8 doesn't support enumerable:true\r\n\t\tif (ex.number === -0x7FF5EC54) {\r\n\t\t\tclassListPropDesc.enumerable = false;\r\n\t\t\tobjCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);\r\n\t\t}\r\n\t}\r\n} else if (objCtr[protoProp].__defineGetter__) {\r\n\telemCtrProto.__defineGetter__(classListProp, classListGetter);\r\n}\r\n\r\n}(self));\r\n\r\n} else {\r\n// There is full or partial native classList support, so just check if we need\r\n// to normalize the add/remove and toggle APIs.\r\n\r\n(function () {\r\n\t\"use strict\";\r\n\r\n\tvar testElement = document.createElement(\"_\");\r\n\r\n\ttestElement.classList.add(\"c1\", \"c2\");\r\n\r\n\t// Polyfill for IE 10/11 and Firefox <26, where classList.add and\r\n\t// classList.remove exist but support only one argument at a time.\r\n\tif (!testElement.classList.contains(\"c2\")) {\r\n\t\tvar createMethod = function(method) {\r\n\t\t\tvar original = DOMTokenList.prototype[method];\r\n\r\n\t\t\tDOMTokenList.prototype[method] = function(token) {\r\n\t\t\t\tvar i, len = arguments.length;\r\n\r\n\t\t\t\tfor (i = 0; i < len; i++) {\r\n\t\t\t\t\ttoken = arguments[i];\r\n\t\t\t\t\toriginal.call(this, token);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t};\r\n\t\tcreateMethod('add');\r\n\t\tcreateMethod('remove');\r\n\t}\r\n\r\n\ttestElement.classList.toggle(\"c3\", false);\r\n\r\n\t// Polyfill for IE 10 and Firefox <24, where classList.toggle does not\r\n\t// support the second argument.\r\n\tif (testElement.classList.contains(\"c3\")) {\r\n\t\tvar _toggle = DOMTokenList.prototype.toggle;\r\n\r\n\t\tDOMTokenList.prototype.toggle = function(token, force) {\r\n\t\t\tif (1 in arguments && !this.contains(token) === !force) {\r\n\t\t\t\treturn force;\r\n\t\t\t} else {\r\n\t\t\t\treturn _toggle.call(this, token);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t}\r\n\r\n\ttestElement = null;\r\n}());\r\n\r\n}\r\n\r\n}\r\n\r\n",null]}