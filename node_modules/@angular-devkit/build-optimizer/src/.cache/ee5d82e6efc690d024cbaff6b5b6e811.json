{"remainingRequest":"/home/chetan/Desktop/Chetan Git Folder/uaswitchingwebsiteangular/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/chetan/Desktop/Chetan Git Folder/uaswitchingwebsiteangular/node_modules/core-js/modules/_date-to-iso-string.js","dependencies":[{"path":"/home/chetan/Desktop/Chetan Git Folder/uaswitchingwebsiteangular/node_modules/core-js/modules/_date-to-iso-string.js","mtime":1538990516238},{"path":"/home/chetan/Desktop/Chetan Git Folder/uaswitchingwebsiteangular/node_modules/cache-loader/dist/cjs.js","mtime":1538990516170},{"path":"/home/chetan/Desktop/Chetan Git Folder/uaswitchingwebsiteangular/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1538990515734}],"contextDependencies":[],"result":["'use strict';\n// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()\nvar fails = require('./_fails');\nvar getTime = Date.prototype.getTime;\nvar $toISOString = Date.prototype.toISOString;\n\nvar lz = function (num) {\n  return num > 9 ? num : '0' + num;\n};\n\n// PhantomJS / old WebKit has a broken implementations\nmodule.exports = (fails(function () {\n  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';\n}) || !fails(function () {\n  $toISOString.call(new Date(NaN));\n})) ? function toISOString() {\n  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');\n  var d = this;\n  var y = d.getUTCFullYear();\n  var m = d.getUTCMilliseconds();\n  var s = y < 0 ? '-' : y > 9999 ? '+' : '';\n  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +\n    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +\n    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +\n    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';\n} : $toISOString;\n",null]}