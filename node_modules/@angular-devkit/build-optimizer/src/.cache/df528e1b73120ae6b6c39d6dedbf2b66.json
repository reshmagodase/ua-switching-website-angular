{"remainingRequest":"/home/chetan/Desktop/Chetan Git Folder/uaswitchingwebsiteangular/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/chetan/Desktop/Chetan Git Folder/uaswitchingwebsiteangular/node_modules/@ng-bootstrap/ng-bootstrap/util/focus-trap.js","dependencies":[{"path":"/home/chetan/Desktop/Chetan Git Folder/uaswitchingwebsiteangular/node_modules/@ng-bootstrap/ng-bootstrap/util/focus-trap.js","mtime":499162500000},{"path":"/home/chetan/Desktop/Chetan Git Folder/uaswitchingwebsiteangular/node_modules/cache-loader/dist/cjs.js","mtime":1528430347272},{"path":"/home/chetan/Desktop/Chetan Git Folder/uaswitchingwebsiteangular/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { fromEvent } from 'rxjs';\nimport { filter, map, takeUntil, withLatestFrom } from 'rxjs/operators';\nvar Key = /*@__PURE__*/ (function (Key) {\n    Key[Key[\"Tab\"] = 9] = \"Tab\";\n    return Key;\n})({});\nvar FOCUSABLE_ELEMENTS_SELECTOR = [\n    'a[href]', 'button:not([disabled])', 'input:not([disabled]):not([type=\"hidden\"])', 'select:not([disabled])',\n    'textarea:not([disabled])', '[contenteditable]', '[tabindex]:not([tabindex=\"-1\"])'\n].join(', ');\n/**\n * Returns first and last focusable elements inside of a given element based on specific CSS selector\n */\nfunction getFocusableBoundaryElements(element) {\n    var list = element.querySelectorAll(FOCUSABLE_ELEMENTS_SELECTOR);\n    return [list[0], list[list.length - 1]];\n}\n/**\n * Function that enforces browser focus to be trapped inside a DOM element.\n *\n * Works only for clicks inside the element and navigation with 'Tab', ignoring clicks outside of the element\n *\n * @param element The element around which focus will be trapped inside\n * @param stopFocusTrap$ The observable stream. When completed the focus trap will clean up listeners\n * and free internal resources\n */\nexport var ngbFocusTrap = function (element, stopFocusTrap$) {\n    // last focused element\n    var lastFocusedElement$ = fromEvent(element, 'focusin').pipe(takeUntil(stopFocusTrap$), map(function (e) { return e.target; }));\n    // 'tab' / 'shift+tab' stream\n    fromEvent(element, 'keydown')\n        .pipe(takeUntil(stopFocusTrap$), filter(function (e) { return e.which === Key.Tab; }), withLatestFrom(lastFocusedElement$))\n        .subscribe(function (_a) {\n        var tabEvent = _a[0], focusedElement = _a[1];\n        var _b = getFocusableBoundaryElements(element), first = _b[0], last = _b[1];\n        if (focusedElement === first && tabEvent.shiftKey) {\n            last.focus();\n            tabEvent.preventDefault();\n        }\n        if (focusedElement === last && !tabEvent.shiftKey) {\n            first.focus();\n            tabEvent.preventDefault();\n        }\n    });\n    // inside click\n    fromEvent(element, 'click')\n        .pipe(takeUntil(stopFocusTrap$), withLatestFrom(lastFocusedElement$), map(function (arr) { return arr[1]; }))\n        .subscribe(function (lastFocusedElement) { return lastFocusedElement.focus(); });\n};\n//# sourceMappingURL=focus-trap.js.map\n",null]}