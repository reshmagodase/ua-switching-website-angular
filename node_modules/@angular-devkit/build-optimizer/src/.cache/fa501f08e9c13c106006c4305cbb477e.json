{"remainingRequest":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\chronos\\duration\\humanize.js","dependencies":[{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\chronos\\duration\\humanize.js","mtime":1676443216346},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676443201610},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1676443192566}],"contextDependencies":[],"result":["import { createDuration } from './create';\r\nvar round = Math.round;\r\nvar thresholds = {\r\n    ss: 44,\r\n    // a few seconds to seconds\r\n    s: 45,\r\n    // seconds to minute\r\n    m: 45,\r\n    // minutes to hour\r\n    h: 22,\r\n    // hours to day\r\n    d: 26,\r\n    // days to month\r\n    M: 11 // months to year\r\n};\r\n// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\r\nfunction substituteTimeAgo(str, num, withoutSuffix, isFuture, locale) {\r\n    return locale.relativeTime(num || 1, !!withoutSuffix, str, isFuture);\r\n}\r\nexport function relativeTime(posNegDuration, withoutSuffix, locale) {\r\n    var duration = createDuration(posNegDuration).abs();\r\n    var seconds = round(duration.as('s'));\r\n    var minutes = round(duration.as('m'));\r\n    var hours = round(duration.as('h'));\r\n    var days = round(duration.as('d'));\r\n    var months = round(duration.as('M'));\r\n    var years = round(duration.as('y'));\r\n    var a = seconds <= thresholds.ss && ['s', seconds] ||\r\n        seconds < thresholds.s && ['ss', seconds] ||\r\n        minutes <= 1 && ['m'] ||\r\n        minutes < thresholds.m && ['mm', minutes] ||\r\n        hours <= 1 && ['h'] ||\r\n        hours < thresholds.h && ['hh', hours] ||\r\n        days <= 1 && ['d'] ||\r\n        days < thresholds.d && ['dd', days] ||\r\n        months <= 1 && ['M'] ||\r\n        months < thresholds.M && ['MM', months] ||\r\n        years <= 1 && ['y'] || ['yy', years];\r\n    var b = [a[0], a[1], withoutSuffix, +posNegDuration > 0, locale];\r\n    // a[2] = withoutSuffix;\r\n    // a[3] = +posNegDuration > 0;\r\n    // a[4] = locale;\r\n    return substituteTimeAgo.apply(null, b);\r\n}\r\n// This function allows you to set the rounding function for relative time strings\r\nexport function getSetRelativeTimeRounding(roundingFunction) {\r\n    if (roundingFunction === undefined) {\r\n        return round;\r\n    }\r\n    if (typeof (roundingFunction) === 'function') {\r\n        round = roundingFunction;\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n// This function allows you to set a threshold for relative time strings\r\nexport function getSetRelativeTimeThreshold(threshold, limit) {\r\n    if (thresholds[threshold] === undefined) {\r\n        return false;\r\n    }\r\n    if (limit === undefined) {\r\n        return thresholds[threshold];\r\n    }\r\n    thresholds[threshold] = limit;\r\n    if (threshold === 's') {\r\n        thresholds.ss = limit - 1;\r\n    }\r\n    return true;\r\n}\r\n// export function humanize(withSuffix) {\r\n//   if (!this.isValid()) {\r\n//     return this.localeData().invalidDate();\r\n//   }\r\n//\r\n//   const locale = this.localeData();\r\n//   let output = relativeTime(this, !withSuffix, locale);\r\n//\r\n//   if (withSuffix) {\r\n//     output = locale.pastFuture(+this, output);\r\n//   }\r\n//\r\n//   return locale.postformat(output);\r\n// }\r\n//# sourceMappingURL=humanize.js.map",null]}