{"remainingRequest":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\chronos\\parse\\regex.js","dependencies":[{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\chronos\\parse\\regex.js","mtime":1676443216584},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676443201610},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1676443192566}],"contextDependencies":[],"result":["import { hasOwnProp, isFunction } from '../utils/type-checks';\r\nexport var match1 = /\\d/; //       0 - 9\r\nexport var match2 = /\\d\\d/; //      00 - 99\r\nexport var match3 = /\\d{3}/; //     000 - 999\r\nexport var match4 = /\\d{4}/; //    0000 - 9999\r\nexport var match6 = /[+-]?\\d{6}/; // -999999 - 999999\r\nexport var match1to2 = /\\d\\d?/; //       0 - 99\r\nexport var match3to4 = /\\d\\d\\d\\d?/; //     999 - 9999\r\nexport var match5to6 = /\\d\\d\\d\\d\\d\\d?/; //   99999 - 999999\r\nexport var match1to3 = /\\d{1,3}/; //       0 - 999\r\nexport var match1to4 = /\\d{1,4}/; //       0 - 9999\r\nexport var match1to6 = /[+-]?\\d{1,6}/; // -999999 - 999999\r\nexport var matchUnsigned = /\\d+/; //       0 - inf\r\nexport var matchSigned = /[+-]?\\d+/; //    -inf - inf\r\nexport var matchOffset = /Z|[+-]\\d\\d:?\\d\\d/gi; // +00:00 -00:00 +0000 -0000 or Z\r\nexport var matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z\r\nexport var matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123\r\n// any word (or two) characters or numbers including two/three word month in arabic.\r\n// includes scottish gaelic two word and hyphenated months\r\n// tslint:disable-next-line\r\nexport var matchWord = /[0-9]{0,256}['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]{1,256}|[\\u0600-\\u06FF\\/]{1,256}(\\s*?[\\u0600-\\u06FF]{1,256}){1,2}/i;\r\nvar regexes = {};\r\nexport function addRegexToken(token, regex, strictRegex) {\r\n    if (isFunction(regex)) {\r\n        regexes[token] = regex;\r\n        return;\r\n    }\r\n    regexes[token] = function (isStrict, locale) {\r\n        return (isStrict && strictRegex) ? strictRegex : regex;\r\n    };\r\n}\r\nexport function getParseRegexForToken(token, locale) {\r\n    var _strict = false;\r\n    if (!hasOwnProp(regexes, token)) {\r\n        return new RegExp(unescapeFormat(token));\r\n    }\r\n    return regexes[token](_strict, locale);\r\n}\r\n// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\r\nfunction unescapeFormat(str) {\r\n    // tslint:disable-next-line\r\n    return regexEscape(str\r\n        .replace('\\\\', '')\r\n        .replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) { return p1 || p2 || p3 || p4; }));\r\n}\r\nexport function regexEscape(str) {\r\n    return str.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n}\r\n//# sourceMappingURL=regex.js.map",null]}