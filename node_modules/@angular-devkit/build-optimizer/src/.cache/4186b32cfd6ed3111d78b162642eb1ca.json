{"remainingRequest":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\chronos\\units\\day-of-week.js","dependencies":[{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\chronos\\units\\day-of-week.js","mtime":1676443216613},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676443201610},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1676443192566}],"contextDependencies":[],"result":["import { addFormatToken } from '../format/format';\r\nimport { getDay } from '../utils/date-getters';\r\nimport { addRegexToken, match1to2 } from '../parse/regex';\r\nimport { addUnitAlias } from './aliases';\r\nimport { addUnitPriority } from './priorities';\r\nimport { addWeekParseToken } from '../parse/token';\r\nimport { getParsingFlags } from '../create/parsing-flags';\r\nimport { isNumber, isString, toInt } from '../utils/type-checks';\r\nimport { add } from '../moment/add-subtract';\r\nimport { getLocale } from '../locale/locales';\r\n// FORMATTING\r\naddFormatToken('d', null, 'do', function (date, opts) {\r\n    return getDay(date, opts.isUTC).toString(10);\r\n});\r\naddFormatToken('dd', null, null, function (date, opts) {\r\n    return opts.locale.weekdaysMin(date, opts.format, opts.isUTC);\r\n});\r\naddFormatToken('ddd', null, null, function (date, opts) {\r\n    return opts.locale.weekdaysShort(date, opts.format, opts.isUTC);\r\n});\r\naddFormatToken('dddd', null, null, function (date, opts) {\r\n    return opts.locale.weekdays(date, opts.format, opts.isUTC);\r\n});\r\naddFormatToken('e', null, null, function (date, opts) {\r\n    return getLocaleDayOfWeek(date, opts.locale, opts.isUTC).toString(10);\r\n    // return getDay(date, opts.isUTC).toString(10);\r\n});\r\naddFormatToken('E', null, null, function (date, opts) {\r\n    return getISODayOfWeek(date, opts.isUTC).toString(10);\r\n});\r\n// ALIASES\r\naddUnitAlias('day', 'd');\r\naddUnitAlias('weekday', 'e');\r\naddUnitAlias('isoWeekday', 'E');\r\n// PRIORITY\r\naddUnitPriority('day', 11);\r\naddUnitPriority('weekday', 11);\r\naddUnitPriority('isoWeekday', 11);\r\n// PARSING\r\naddRegexToken('d', match1to2);\r\naddRegexToken('e', match1to2);\r\naddRegexToken('E', match1to2);\r\naddRegexToken('dd', function (isStrict, locale) {\r\n    return locale.weekdaysMinRegex(isStrict);\r\n});\r\naddRegexToken('ddd', function (isStrict, locale) {\r\n    return locale.weekdaysShortRegex(isStrict);\r\n});\r\naddRegexToken('dddd', function (isStrict, locale) {\r\n    return locale.weekdaysRegex(isStrict);\r\n});\r\naddWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\r\n    var weekday = config._locale.weekdaysParse(input, token, config._strict);\r\n    // if we didn't get a weekday name, mark the date as invalid\r\n    if (weekday != null) {\r\n        week.d = weekday;\r\n    }\r\n    else {\r\n        getParsingFlags(config).invalidWeekday = !!input;\r\n    }\r\n    return config;\r\n});\r\naddWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\r\n    week[token] = toInt(input);\r\n    return config;\r\n});\r\n// HELPERS\r\nexport function parseWeekday(input, locale) {\r\n    if (!isString(input)) {\r\n        return input;\r\n    }\r\n    var _num = parseInt(input, 10);\r\n    if (!isNaN(_num)) {\r\n        return _num;\r\n    }\r\n    var _weekDay = locale.weekdaysParse(input);\r\n    if (isNumber(_weekDay)) {\r\n        return _weekDay;\r\n    }\r\n    return null;\r\n}\r\nexport function parseIsoWeekday(input, locale) {\r\n    if (locale === void 0) { locale = getLocale(); }\r\n    if (isString(input)) {\r\n        return locale.weekdaysParse(input) % 7 || 7;\r\n    }\r\n    return isNumber(input) && isNaN(input) ? null : input;\r\n}\r\n// MOMENTS\r\nexport function getSetDayOfWeek(date, input, opts) {\r\n    if (!input) {\r\n        return getDayOfWeek(date, opts.isUTC);\r\n    }\r\n    return setDayOfWeek(date, input, opts.locale, opts.isUTC);\r\n}\r\nexport function setDayOfWeek(date, input, locale, isUTC) {\r\n    if (locale === void 0) { locale = getLocale(); }\r\n    var day = getDay(date, isUTC);\r\n    var _input = parseWeekday(input, locale);\r\n    return add(date, _input - day, 'day');\r\n}\r\nexport function getDayOfWeek(date, isUTC) {\r\n    return getDay(date, isUTC);\r\n}\r\n/********************************************/\r\n// todo: utc\r\n// getSetLocaleDayOfWeek\r\nexport function getLocaleDayOfWeek(date, locale, isUTC) {\r\n    if (locale === void 0) { locale = getLocale(); }\r\n    return (getDay(date, isUTC) + 7 - locale.firstDayOfWeek()) % 7;\r\n}\r\nexport function setLocaleDayOfWeek(date, input, opts) {\r\n    if (opts === void 0) { opts = {}; }\r\n    var weekday = getLocaleDayOfWeek(date, opts.locale, opts.isUTC);\r\n    return add(date, input - weekday, 'day');\r\n}\r\n// getSetISODayOfWeek\r\nexport function getISODayOfWeek(date, isUTC) {\r\n    return getDay(date, isUTC) || 7;\r\n}\r\nexport function setISODayOfWeek(date, input, opts) {\r\n    if (opts === void 0) { opts = {}; }\r\n    // behaves the same as moment#day except\r\n    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\r\n    // as a setter, sunday should belong to the previous week.\r\n    var weekday = parseIsoWeekday(input, opts.locale);\r\n    return setDayOfWeek(date, getDayOfWeek(date) % 7 ? weekday : weekday - 7);\r\n}\r\n//# sourceMappingURL=day-of-week.js.map",null]}