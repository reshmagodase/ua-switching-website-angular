{"remainingRequest":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\positioning\\ng-positioning.js","dependencies":[{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\positioning\\ng-positioning.js","mtime":1676443217210},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676443201610},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1676443192566}],"contextDependencies":[],"result":["/**\r\n * @copyright Valor Software\r\n * @copyright Angular ng-bootstrap team\r\n */\r\n// previous version:\r\n// https://github.com/angular-ui/bootstrap/blob/07c31d0731f7cb068a1932b8e01d2312b796b4ec/src/position/position.js\r\n// tslint:disable\r\nvar \r\n// previous version:\r\n// https://github.com/angular-ui/bootstrap/blob/07c31d0731f7cb068a1932b8e01d2312b796b4ec/src/position/position.js\r\n// tslint:disable\r\nPositioning = /** @class */ (function () {\r\n    function Positioning() {\r\n    }\r\n    Positioning.prototype.position = function (element, round) {\r\n        if (round === void 0) { round = true; }\r\n        var elPosition;\r\n        var parentOffset = {\r\n            width: 0,\r\n            height: 0,\r\n            top: 0,\r\n            bottom: 0,\r\n            left: 0,\r\n            right: 0\r\n        };\r\n        if (this.getStyle(element, 'position') === 'fixed') {\r\n            var bcRect = element.getBoundingClientRect();\r\n            elPosition = {\r\n                width: bcRect.width,\r\n                height: bcRect.height,\r\n                top: bcRect.top,\r\n                bottom: bcRect.bottom,\r\n                left: bcRect.left,\r\n                right: bcRect.right\r\n            };\r\n        }\r\n        else {\r\n            var offsetParentEl = this.offsetParent(element);\r\n            elPosition = this.offset(element, false);\r\n            if (offsetParentEl !== document.documentElement) {\r\n                parentOffset = this.offset(offsetParentEl, false);\r\n            }\r\n            parentOffset.top += offsetParentEl.clientTop;\r\n            parentOffset.left += offsetParentEl.clientLeft;\r\n        }\r\n        elPosition.top -= parentOffset.top;\r\n        elPosition.bottom -= parentOffset.top;\r\n        elPosition.left -= parentOffset.left;\r\n        elPosition.right -= parentOffset.left;\r\n        if (round) {\r\n            elPosition.top = Math.round(elPosition.top);\r\n            elPosition.bottom = Math.round(elPosition.bottom);\r\n            elPosition.left = Math.round(elPosition.left);\r\n            elPosition.right = Math.round(elPosition.right);\r\n        }\r\n        return elPosition;\r\n    };\r\n    Positioning.prototype.offset = function (element, round) {\r\n        if (round === void 0) { round = true; }\r\n        var elBcr = element.getBoundingClientRect();\r\n        var viewportOffset = {\r\n            top: window.pageYOffset - document.documentElement.clientTop,\r\n            left: window.pageXOffset - document.documentElement.clientLeft\r\n        };\r\n        var elOffset = {\r\n            height: elBcr.height || element.offsetHeight,\r\n            width: elBcr.width || element.offsetWidth,\r\n            top: elBcr.top + viewportOffset.top,\r\n            bottom: elBcr.bottom + viewportOffset.top,\r\n            left: elBcr.left + viewportOffset.left,\r\n            right: elBcr.right + viewportOffset.left\r\n        };\r\n        if (round) {\r\n            elOffset.height = Math.round(elOffset.height);\r\n            elOffset.width = Math.round(elOffset.width);\r\n            elOffset.top = Math.round(elOffset.top);\r\n            elOffset.bottom = Math.round(elOffset.bottom);\r\n            elOffset.left = Math.round(elOffset.left);\r\n            elOffset.right = Math.round(elOffset.right);\r\n        }\r\n        return elOffset;\r\n    };\r\n    Positioning.prototype.positionElements = function (hostElement, targetElement, placement, appendToBody) {\r\n        var hostElPosition = appendToBody\r\n            ? this.offset(hostElement, false)\r\n            : this.position(hostElement, false);\r\n        var targetElStyles = this.getAllStyles(targetElement);\r\n        var shiftWidth = {\r\n            left: hostElPosition.left,\r\n            center: hostElPosition.left +\r\n                hostElPosition.width / 2 -\r\n                targetElement.offsetWidth / 2,\r\n            right: hostElPosition.left + hostElPosition.width\r\n        };\r\n        var shiftHeight = {\r\n            top: hostElPosition.top,\r\n            center: hostElPosition.top +\r\n                hostElPosition.height / 2 -\r\n                targetElement.offsetHeight / 2,\r\n            bottom: hostElPosition.top + hostElPosition.height\r\n        };\r\n        var targetElBCR = targetElement.getBoundingClientRect();\r\n        var placementPrimary = placement.split(' ')[0] || 'top';\r\n        var placementSecondary = placement.split(' ')[1] || 'center';\r\n        var targetElPosition = {\r\n            height: targetElBCR.height || targetElement.offsetHeight,\r\n            width: targetElBCR.width || targetElement.offsetWidth,\r\n            top: 0,\r\n            bottom: targetElBCR.height || targetElement.offsetHeight,\r\n            left: 0,\r\n            right: targetElBCR.width || targetElement.offsetWidth\r\n        };\r\n        if (placementPrimary === 'auto') {\r\n            var newPlacementPrimary = this.autoPosition(targetElPosition, hostElPosition, targetElement, placementSecondary);\r\n            if (!newPlacementPrimary)\r\n                newPlacementPrimary = this.autoPosition(targetElPosition, hostElPosition, targetElement);\r\n            if (newPlacementPrimary)\r\n                placementPrimary = newPlacementPrimary;\r\n            targetElement.classList.add(placementPrimary);\r\n        }\r\n        switch (placementPrimary) {\r\n            case 'top':\r\n                targetElPosition.top =\r\n                    hostElPosition.top -\r\n                        (targetElement.offsetHeight +\r\n                            parseFloat(targetElStyles.marginBottom));\r\n                targetElPosition.bottom +=\r\n                    hostElPosition.top - targetElement.offsetHeight;\r\n                targetElPosition.left = shiftWidth[placementSecondary];\r\n                targetElPosition.right += shiftWidth[placementSecondary];\r\n                break;\r\n            case 'bottom':\r\n                targetElPosition.top = shiftHeight[placementPrimary];\r\n                targetElPosition.bottom += shiftHeight[placementPrimary];\r\n                targetElPosition.left = shiftWidth[placementSecondary];\r\n                targetElPosition.right += shiftWidth[placementSecondary];\r\n                break;\r\n            case 'left':\r\n                targetElPosition.top = shiftHeight[placementSecondary];\r\n                targetElPosition.bottom += shiftHeight[placementSecondary];\r\n                targetElPosition.left =\r\n                    hostElPosition.left -\r\n                        (targetElement.offsetWidth + parseFloat(targetElStyles.marginRight));\r\n                targetElPosition.right +=\r\n                    hostElPosition.left - targetElement.offsetWidth;\r\n                break;\r\n            case 'right':\r\n                targetElPosition.top = shiftHeight[placementSecondary];\r\n                targetElPosition.bottom += shiftHeight[placementSecondary];\r\n                targetElPosition.left = shiftWidth[placementPrimary];\r\n                targetElPosition.right += shiftWidth[placementPrimary];\r\n                break;\r\n        }\r\n        targetElPosition.top = Math.round(targetElPosition.top);\r\n        targetElPosition.bottom = Math.round(targetElPosition.bottom);\r\n        targetElPosition.left = Math.round(targetElPosition.left);\r\n        targetElPosition.right = Math.round(targetElPosition.right);\r\n        return targetElPosition;\r\n    };\r\n    Positioning.prototype.autoPosition = function (targetElPosition, hostElPosition, targetElement, preferredPosition) {\r\n        if ((!preferredPosition || preferredPosition === 'right') &&\r\n            targetElPosition.left + hostElPosition.left - targetElement.offsetWidth <\r\n                0) {\r\n            return 'right';\r\n        }\r\n        else if ((!preferredPosition || preferredPosition === 'top') &&\r\n            targetElPosition.bottom +\r\n                hostElPosition.bottom +\r\n                targetElement.offsetHeight >\r\n                window.innerHeight) {\r\n            return 'top';\r\n        }\r\n        else if ((!preferredPosition || preferredPosition === 'bottom') &&\r\n            targetElPosition.top + hostElPosition.top - targetElement.offsetHeight < 0) {\r\n            return 'bottom';\r\n        }\r\n        else if ((!preferredPosition || preferredPosition === 'left') &&\r\n            targetElPosition.right +\r\n                hostElPosition.right +\r\n                targetElement.offsetWidth >\r\n                window.innerWidth) {\r\n            return 'left';\r\n        }\r\n        return null;\r\n    };\r\n    Positioning.prototype.getAllStyles = function (element) {\r\n        return window.getComputedStyle(element);\r\n    };\r\n    Positioning.prototype.getStyle = function (element, prop) {\r\n        return this.getAllStyles(element)[prop];\r\n    };\r\n    Positioning.prototype.isStaticPositioned = function (element) {\r\n        return (this.getStyle(element, 'position') || 'static') === 'static';\r\n    };\r\n    Positioning.prototype.offsetParent = function (element) {\r\n        var offsetParentEl = element.offsetParent || document.documentElement;\r\n        while (offsetParentEl &&\r\n            offsetParentEl !== document.documentElement &&\r\n            this.isStaticPositioned(offsetParentEl)) {\r\n            offsetParentEl = offsetParentEl.offsetParent;\r\n        }\r\n        return offsetParentEl || document.documentElement;\r\n    };\r\n    return Positioning;\r\n}());\r\n// previous version:\r\n// https://github.com/angular-ui/bootstrap/blob/07c31d0731f7cb068a1932b8e01d2312b796b4ec/src/position/position.js\r\n// tslint:disable\r\nexport { Positioning };\r\nvar positionService = new Positioning();\r\nexport function positionElements(hostElement, targetElement, placement, appendToBody) {\r\n    var pos = positionService.positionElements(hostElement, targetElement, placement, appendToBody);\r\n    targetElement.style.top = pos.top + \"px\";\r\n    targetElement.style.left = pos.left + \"px\";\r\n}\r\n//# sourceMappingURL=ng-positioning.js.map",null]}