{"remainingRequest":"/home/chetan/Desktop/Chetan Git Folder/uaswitchingwebsiteangular/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/chetan/Desktop/Chetan Git Folder/uaswitchingwebsiteangular/node_modules/ngx-bootstrap/chronos/units/hour.js","dependencies":[{"path":"/home/chetan/Desktop/Chetan Git Folder/uaswitchingwebsiteangular/node_modules/ngx-bootstrap/chronos/units/hour.js","mtime":499162500000},{"path":"/home/chetan/Desktop/Chetan Git Folder/uaswitchingwebsiteangular/node_modules/cache-loader/dist/cjs.js","mtime":1528430347272},{"path":"/home/chetan/Desktop/Chetan Git Folder/uaswitchingwebsiteangular/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { getHours, getMinutes, getSeconds } from '../utils/date-getters';\nimport { addFormatToken } from '../format/format';\nimport { zeroFill } from '../utils/zero-fill';\nimport { addRegexToken, match1to2, match2, match3to4, match5to6 } from '../parse/regex';\nimport { addParseToken } from '../parse/token';\nimport { HOUR, MINUTE, SECOND } from './constants';\nimport { toInt } from '../utils/type-checks';\nimport { getParsingFlags } from '../create/parsing-flags';\nimport { addUnitPriority } from './priorities';\nimport { addUnitAlias } from './aliases';\n// FORMATTING\nfunction hFormat(date, isUTC) {\n    return getHours(date, isUTC) % 12 || 12;\n}\nfunction kFormat(date, isUTC) {\n    return getHours(date, isUTC) || 24;\n}\naddFormatToken('H', ['HH', 2, false], null, function (date, opts) {\n    return getHours(date, opts.isUTC).toString(10);\n});\naddFormatToken('h', ['hh', 2, false], null, function (date, opts) {\n    return hFormat(date, opts.isUTC).toString(10);\n});\naddFormatToken('k', ['kk', 2, false], null, function (date, opts) {\n    return kFormat(date, opts.isUTC).toString(10);\n});\naddFormatToken('hmm', null, null, function (date, opts) {\n    var _h = hFormat(date, opts.isUTC);\n    var _mm = zeroFill(getMinutes(date, opts.isUTC), 2);\n    return \"\" + _h + _mm;\n});\naddFormatToken('hmmss', null, null, function (date, opts) {\n    var _h = hFormat(date, opts.isUTC);\n    var _mm = zeroFill(getMinutes(date, opts.isUTC), 2);\n    var _ss = zeroFill(getSeconds(date, opts.isUTC), 2);\n    return \"\" + _h + _mm + _ss;\n});\naddFormatToken('Hmm', null, null, function (date, opts) {\n    var _H = getHours(date, opts.isUTC);\n    var _mm = zeroFill(getMinutes(date, opts.isUTC), 2);\n    return \"\" + _H + _mm;\n});\naddFormatToken('Hmmss', null, null, function (date, opts) {\n    var _H = getHours(date, opts.isUTC);\n    var _mm = zeroFill(getMinutes(date, opts.isUTC), 2);\n    var _ss = zeroFill(getSeconds(date, opts.isUTC), 2);\n    return \"\" + _H + _mm + _ss;\n});\nfunction meridiem(token, lowercase) {\n    addFormatToken(token, null, null, function (date, opts) {\n        return opts.locale.meridiem(getHours(date, opts.isUTC), getMinutes(date, opts.isUTC), lowercase);\n    });\n}\nmeridiem('a', true);\nmeridiem('A', false);\n// ALIASES\naddUnitAlias('hour', 'h');\n// PRIORITY\naddUnitPriority('hour', 13);\n// PARSING\nfunction matchMeridiem(isStrict, locale) {\n    return locale._meridiemParse;\n}\naddRegexToken('a', matchMeridiem);\naddRegexToken('A', matchMeridiem);\naddRegexToken('H', match1to2);\naddRegexToken('h', match1to2);\naddRegexToken('k', match1to2);\naddRegexToken('HH', match1to2, match2);\naddRegexToken('hh', match1to2, match2);\naddRegexToken('kk', match1to2, match2);\naddRegexToken('hmm', match3to4);\naddRegexToken('hmmss', match5to6);\naddRegexToken('Hmm', match3to4);\naddRegexToken('Hmmss', match5to6);\naddParseToken(['H', 'HH'], HOUR);\naddParseToken(['k', 'kk'], function (input, array, config) {\n    var kInput = toInt(input);\n    array[HOUR] = kInput === 24 ? 0 : kInput;\n    return config;\n});\naddParseToken(['a', 'A'], function (input, array, config) {\n    config._isPm = config._locale.isPM(input);\n    config._meridiem = input;\n    return config;\n});\naddParseToken(['h', 'hh'], function (input, array, config) {\n    array[HOUR] = toInt(input);\n    getParsingFlags(config).bigHour = true;\n    return config;\n});\naddParseToken('hmm', function (input, array, config) {\n    var pos = input.length - 2;\n    array[HOUR] = toInt(input.substr(0, pos));\n    array[MINUTE] = toInt(input.substr(pos));\n    getParsingFlags(config).bigHour = true;\n    return config;\n});\naddParseToken('hmmss', function (input, array, config) {\n    var pos1 = input.length - 4;\n    var pos2 = input.length - 2;\n    array[HOUR] = toInt(input.substr(0, pos1));\n    array[MINUTE] = toInt(input.substr(pos1, 2));\n    array[SECOND] = toInt(input.substr(pos2));\n    getParsingFlags(config).bigHour = true;\n    return config;\n});\naddParseToken('Hmm', function (input, array, config) {\n    var pos = input.length - 2;\n    array[HOUR] = toInt(input.substr(0, pos));\n    array[MINUTE] = toInt(input.substr(pos));\n    return config;\n});\naddParseToken('Hmmss', function (input, array, config) {\n    var pos1 = input.length - 4;\n    var pos2 = input.length - 2;\n    array[HOUR] = toInt(input.substr(0, pos1));\n    array[MINUTE] = toInt(input.substr(pos1, 2));\n    array[SECOND] = toInt(input.substr(pos2));\n    return config;\n});\n//# sourceMappingURL=hour.js.map",null]}