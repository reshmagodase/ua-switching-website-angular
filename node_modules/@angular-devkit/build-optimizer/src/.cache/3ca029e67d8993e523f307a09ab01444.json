{"remainingRequest":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\chronos\\create\\from-string.js","dependencies":[{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\chronos\\create\\from-string.js","mtime":1676443216315},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676443201610},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1676443192566}],"contextDependencies":[],"result":["import { defaultLocaleMonthsShort, defaultLocaleWeekdaysShort } from '../locale/locale.class';\r\nimport { isString } from '../utils/type-checks';\r\nimport { configFromStringAndFormat } from './from-string-and-format';\r\nimport { createUTCDate } from './date-from-array';\r\nimport { createInvalid, markInvalid } from './valid';\r\nimport { getParsingFlags } from './parsing-flags';\r\n// iso 8601 regex\r\n// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\r\n// tslint:disable-next-line\r\nvar extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\r\n// tslint:disable-next-line\r\nvar basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\r\nvar tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;\r\nvar isoDates = [\r\n    ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/, true],\r\n    ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/, true],\r\n    ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/, true],\r\n    ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],\r\n    ['YYYY-DDD', /\\d{4}-\\d{3}/, true],\r\n    ['YYYY-MM', /\\d{4}-\\d\\d/, false],\r\n    ['YYYYYYMMDD', /[+-]\\d{10}/, true],\r\n    ['YYYYMMDD', /\\d{8}/, true],\r\n    // YYYYMM is NOT allowed by the standard\r\n    ['GGGG[W]WWE', /\\d{4}W\\d{3}/, true],\r\n    ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],\r\n    ['YYYYDDD', /\\d{7}/, true]\r\n];\r\n// iso time formats and regexes\r\nvar isoTimes = [\r\n    ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\r\n    ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],\r\n    ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],\r\n    ['HH:mm', /\\d\\d:\\d\\d/],\r\n    ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],\r\n    ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],\r\n    ['HHmmss', /\\d\\d\\d\\d\\d\\d/],\r\n    ['HHmm', /\\d\\d\\d\\d/],\r\n    ['HH', /\\d\\d/]\r\n];\r\nvar aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;\r\nvar obsOffsets = {\r\n    UT: 0,\r\n    GMT: 0,\r\n    EDT: -4 * 60,\r\n    EST: -5 * 60,\r\n    CDT: -5 * 60,\r\n    CST: -6 * 60,\r\n    MDT: -6 * 60,\r\n    MST: -7 * 60,\r\n    PDT: -7 * 60,\r\n    PST: -8 * 60\r\n};\r\n// RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\r\n// tslint:disable-next-line\r\nvar rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/;\r\n// date from iso format\r\nexport function configFromISO(config) {\r\n    if (!isString(config._i)) {\r\n        return config;\r\n    }\r\n    var input = config._i;\r\n    var match = extendedIsoRegex.exec(input) || basicIsoRegex.exec(input);\r\n    var allowTime;\r\n    var dateFormat;\r\n    var timeFormat;\r\n    var tzFormat;\r\n    if (!match) {\r\n        config._isValid = false;\r\n        return config;\r\n    }\r\n    // getParsingFlags(config).iso = true;\r\n    var i;\r\n    var l;\r\n    for (i = 0, l = isoDates.length; i < l; i++) {\r\n        if (isoDates[i][1].exec(match[1])) {\r\n            dateFormat = isoDates[i][0];\r\n            allowTime = isoDates[i][2] !== false;\r\n            break;\r\n        }\r\n    }\r\n    if (dateFormat == null) {\r\n        config._isValid = false;\r\n        return config;\r\n    }\r\n    if (match[3]) {\r\n        for (i = 0, l = isoTimes.length; i < l; i++) {\r\n            if (isoTimes[i][1].exec(match[3])) {\r\n                // match[2] should be 'T' or space\r\n                timeFormat = (match[2] || ' ') + isoTimes[i][0];\r\n                break;\r\n            }\r\n        }\r\n        if (timeFormat == null) {\r\n            config._isValid = false;\r\n            return config;\r\n        }\r\n    }\r\n    if (!allowTime && timeFormat != null) {\r\n        config._isValid = false;\r\n        return config;\r\n    }\r\n    if (match[4]) {\r\n        if (tzRegex.exec(match[4])) {\r\n            tzFormat = 'Z';\r\n        }\r\n        else {\r\n            config._isValid = false;\r\n            return config;\r\n        }\r\n    }\r\n    config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\r\n    return configFromStringAndFormat(config);\r\n}\r\n// tslint:disable-next-line\r\nfunction extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\r\n    var result = [\r\n        untruncateYear(yearStr),\r\n        defaultLocaleMonthsShort.indexOf(monthStr),\r\n        parseInt(dayStr, 10),\r\n        parseInt(hourStr, 10),\r\n        parseInt(minuteStr, 10)\r\n    ];\r\n    if (secondStr) {\r\n        result.push(parseInt(secondStr, 10));\r\n    }\r\n    return result;\r\n}\r\nfunction untruncateYear(yearStr) {\r\n    var year = parseInt(yearStr, 10);\r\n    return year <= 49 ? year + 2000 : year;\r\n}\r\nfunction preprocessRFC2822(str) {\r\n    // Remove comments and folding whitespace and replace multiple-spaces with a single space\r\n    return str\r\n        .replace(/\\([^)]*\\)|[\\n\\t]/g, ' ')\r\n        .replace(/(\\s\\s+)/g, ' ').trim();\r\n}\r\nfunction checkWeekday(weekdayStr, parsedInput, config) {\r\n    if (weekdayStr) {\r\n        // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.\r\n        var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr);\r\n        var weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();\r\n        if (weekdayProvided !== weekdayActual) {\r\n            getParsingFlags(config).weekdayMismatch = true;\r\n            config._isValid = false;\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction calculateOffset(obsOffset, militaryOffset, numOffset) {\r\n    if (obsOffset) {\r\n        return obsOffsets[obsOffset];\r\n    }\r\n    else if (militaryOffset) {\r\n        // the only allowed military tz is Z\r\n        return 0;\r\n    }\r\n    else {\r\n        var hm = parseInt(numOffset, 10);\r\n        var m = hm % 100;\r\n        var h = (hm - m) / 100;\r\n        return h * 60 + m;\r\n    }\r\n}\r\n// date and time from ref 2822 format\r\nexport function configFromRFC2822(config) {\r\n    if (!isString(config._i)) {\r\n        return config;\r\n    }\r\n    var match = rfc2822.exec(preprocessRFC2822(config._i));\r\n    if (!match) {\r\n        return markInvalid(config);\r\n    }\r\n    var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);\r\n    if (!checkWeekday(match[1], parsedArray, config)) {\r\n        return config;\r\n    }\r\n    config._a = parsedArray;\r\n    config._tzm = calculateOffset(match[8], match[9], match[10]);\r\n    config._d = createUTCDate.apply(null, config._a);\r\n    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\r\n    getParsingFlags(config).rfc2822 = true;\r\n    return config;\r\n}\r\n// date from iso format or fallback\r\nexport function configFromString(config) {\r\n    if (!isString(config._i)) {\r\n        return config;\r\n    }\r\n    var matched = aspNetJsonRegex.exec(config._i);\r\n    if (matched !== null) {\r\n        config._d = new Date(+matched[1]);\r\n        return config;\r\n    }\r\n    // todo: update logic processing\r\n    // isISO -> configFromISO\r\n    // isRFC -> configFromRFC\r\n    configFromISO(config);\r\n    if (config._isValid === false) {\r\n        delete config._isValid;\r\n    }\r\n    else {\r\n        return config;\r\n    }\r\n    configFromRFC2822(config);\r\n    if (config._isValid === false) {\r\n        delete config._isValid;\r\n    }\r\n    else {\r\n        return config;\r\n    }\r\n    // Final attempt, use Input Fallback\r\n    // hooks.createFromInputFallback(config);\r\n    return createInvalid(config);\r\n}\r\n// hooks.createFromInputFallback = deprecate(\r\n//     'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +\r\n//     'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +\r\n//     'discouraged and will be removed in an upcoming major release. Please refer to ' +\r\n//     'http://momentjs.com/guides/#/warnings/js-date/ for more info.',\r\n//     function (config) {\r\n//         config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\r\n//     }\r\n// );\r\n//# sourceMappingURL=from-string.js.map",null]}