{"remainingRequest":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\chronos\\create\\valid.js","dependencies":[{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\chronos\\create\\valid.js","mtime":1676443216330},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676443201610},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1676443192566}],"contextDependencies":[],"result":["import { getParsingFlags } from './parsing-flags';\r\nexport function isValid(config) {\r\n    if (config._isValid == null) {\r\n        var flags = getParsingFlags(config);\r\n        var parsedParts = Array.prototype.some.call(flags.parsedDateParts, function (i) {\r\n            return i != null;\r\n        });\r\n        var isNowValid = !isNaN(config._d && config._d.getTime()) &&\r\n            flags.overflow < 0 &&\r\n            !flags.empty &&\r\n            !flags.invalidMonth &&\r\n            !flags.invalidWeekday &&\r\n            !flags.weekdayMismatch &&\r\n            !flags.nullInput &&\r\n            !flags.invalidFormat &&\r\n            !flags.userInvalidated &&\r\n            (!flags.meridiem || (flags.meridiem && parsedParts));\r\n        if (config._strict) {\r\n            isNowValid = isNowValid &&\r\n                flags.charsLeftOver === 0 &&\r\n                flags.unusedTokens.length === 0 &&\r\n                flags.bigHour === undefined;\r\n        }\r\n        if (Object.isFrozen == null || !Object.isFrozen(config)) {\r\n            config._isValid = isNowValid;\r\n        }\r\n        else {\r\n            return isNowValid;\r\n        }\r\n    }\r\n    return config._isValid;\r\n}\r\nexport function createInvalid(config, flags) {\r\n    config._d = new Date(NaN);\r\n    Object.assign(getParsingFlags(config), flags || { userInvalidated: true });\r\n    return config;\r\n}\r\nexport function markInvalid(config) {\r\n    config._isValid = false;\r\n    return config;\r\n}\r\n//# sourceMappingURL=valid.js.map",null]}