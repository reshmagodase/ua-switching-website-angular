{"remainingRequest":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\chronos\\units\\offset.js","dependencies":[{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\chronos\\units\\offset.js","mtime":1676443216635},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676443201610},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1676443192566}],"contextDependencies":[],"result":["// tslint:disable:no-bitwise max-line-length\r\n// FORMATTING\r\nimport { addFormatToken } from '../format/format';\r\nimport { zeroFill } from '../utils/zero-fill';\r\nimport { isNumber, isString, toInt } from '../utils/type-checks';\r\nimport { addRegexToken, matchOffset, matchShortOffset } from '../parse/regex';\r\nimport { add } from '../moment/add-subtract';\r\nimport { addParseToken } from '../parse/token';\r\nimport { cloneDate } from '../create/clone';\r\nimport { setMonth } from '../utils/date-setters';\r\nfunction addOffsetFormatToken(token, separator) {\r\n    addFormatToken(token, null, null, function (date, config) {\r\n        var offset = getUTCOffset(date, { _isUTC: config.isUTC, _offset: config.offset });\r\n        var sign = '+';\r\n        if (offset < 0) {\r\n            offset = -offset;\r\n            sign = '-';\r\n        }\r\n        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);\r\n    });\r\n}\r\naddOffsetFormatToken('Z', ':');\r\naddOffsetFormatToken('ZZ', '');\r\n// PARSING\r\naddRegexToken('Z', matchShortOffset);\r\naddRegexToken('ZZ', matchShortOffset);\r\naddParseToken(['Z', 'ZZ'], function (input, array, config) {\r\n    config._useUTC = true;\r\n    config._tzm = offsetFromString(matchShortOffset, input);\r\n    return config;\r\n});\r\n// HELPERS\r\n// timezone chunker\r\n// '+10:00' > ['10',  '00']\r\n// '-1530'  > ['-15', '30']\r\nvar chunkOffset = /([\\+\\-]|\\d\\d)/gi;\r\nfunction offsetFromString(matcher, str) {\r\n    var matches = (str || '').match(matcher);\r\n    if (matches === null) {\r\n        return null;\r\n    }\r\n    var chunk = matches[matches.length - 1];\r\n    var parts = chunk.match(chunkOffset) || ['-', '0', '0'];\r\n    var minutes = parseInt(parts[1], 10) * 60 + toInt(parts[2]);\r\n    var _min = parts[0] === '+' ? minutes : -minutes;\r\n    return minutes === 0 ? 0 : _min;\r\n}\r\n// Return a moment from input, that is local/utc/zone equivalent to model.\r\nexport function cloneWithOffset(input, date, config) {\r\n    if (config === void 0) { config = {}; }\r\n    if (!config._isUTC) {\r\n        return input;\r\n    }\r\n    var res = cloneDate(date);\r\n    // todo: input._d - res._d + ((res._offset || 0) - (input._offset || 0))*60000\r\n    var offsetDiff = (config._offset || 0) * 60000;\r\n    var diff = input.valueOf() - res.valueOf() + offsetDiff;\r\n    // Use low-level api, because this fn is low-level api.\r\n    res.setTime(res.valueOf() + diff);\r\n    // todo: add timezone handling\r\n    // hooks.updateOffset(res, false);\r\n    return res;\r\n}\r\nexport function getDateOffset(date) {\r\n    // On Firefox.24 Date#getTimezoneOffset returns a floating point.\r\n    // https://github.com/moment/moment/pull/1871\r\n    return -Math.round(date.getTimezoneOffset() / 15) * 15;\r\n}\r\n// HOOKS\r\n// This function will be called whenever a moment is mutated.\r\n// It is intended to keep the offset in sync with the timezone.\r\n// todo: it's from moment timezones\r\n// hooks.updateOffset = function () {\r\n// };\r\n// MOMENTS\r\n// keepLocalTime = true means only change the timezone, without\r\n// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\r\n// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\r\n// +0200, so we adjust the time as needed, to be valid.\r\n//\r\n// Keeping the time actually adds/subtracts (one hour)\r\n// from the actual represented time. That is why we call updateOffset\r\n// a second time. In case it wants us to change the offset again\r\n// _changeInProgress == true case, then we have to adjust, because\r\n// there is no such time in the given timezone.\r\nexport function getUTCOffset(date, config) {\r\n    if (config === void 0) { config = {}; }\r\n    var _offset = config._offset || 0;\r\n    return config._isUTC ? _offset : getDateOffset(date);\r\n}\r\nexport function setUTCOffset(date, input, keepLocalTime, keepMinutes, config) {\r\n    if (config === void 0) { config = {}; }\r\n    var offset = config._offset || 0;\r\n    var localAdjust;\r\n    var _input = input;\r\n    var _date = date;\r\n    if (isString(_input)) {\r\n        _input = offsetFromString(matchShortOffset, _input);\r\n        if (_input === null) {\r\n            return _date;\r\n        }\r\n    }\r\n    else if (isNumber(_input) && Math.abs(_input) < 16 && !keepMinutes) {\r\n        _input = _input * 60;\r\n    }\r\n    if (!config._isUTC && keepLocalTime) {\r\n        localAdjust = getDateOffset(_date);\r\n    }\r\n    config._offset = _input;\r\n    config._isUTC = true;\r\n    if (localAdjust != null) {\r\n        _date = add(_date, localAdjust, 'minutes');\r\n    }\r\n    if (offset !== _input) {\r\n        if (!keepLocalTime || config._changeInProgress) {\r\n            _date = add(_date, _input - offset, 'minutes', config._isUTC);\r\n            // addSubtract(this, createDuration(_input - offset, 'm'), 1, false);\r\n        }\r\n        else if (!config._changeInProgress) {\r\n            config._changeInProgress = true;\r\n            // todo: add timezone handling\r\n            // hooks.updateOffset(this, true);\r\n            config._changeInProgress = null;\r\n        }\r\n    }\r\n    return _date;\r\n}\r\n/*\r\nexport function getSetZone(input, keepLocalTime) {\r\n  if (input != null) {\r\n    if (typeof input !== 'string') {\r\n      input = -input;\r\n    }\r\n\r\n    this.utcOffset(input, keepLocalTime);\r\n\r\n    return this;\r\n  } else {\r\n    return -this.utcOffset();\r\n  }\r\n}\r\n*/\r\nexport function setOffsetToUTC(date, keepLocalTime) {\r\n    return setUTCOffset(date, 0, keepLocalTime);\r\n}\r\nexport function isDaylightSavingTime(date) {\r\n    return (getUTCOffset(date) > getUTCOffset(setMonth(cloneDate(date), 0))\r\n        || getUTCOffset(date) > getUTCOffset(setMonth(cloneDate(date), 5)));\r\n}\r\n/*export function setOffsetToLocal(date: Date, isUTC?: boolean, keepLocalTime?: boolean) {\r\n  if (this._isUTC) {\r\n    this.utcOffset(0, keepLocalTime);\r\n    this._isUTC = false;\r\n\r\n    if (keepLocalTime) {\r\n      this.subtract(getDateOffset(this), 'm');\r\n    }\r\n  }\r\n  return this;\r\n}*/\r\nexport function setOffsetToParsedOffset(date, input, config) {\r\n    if (config === void 0) { config = {}; }\r\n    if (config._tzm != null) {\r\n        return setUTCOffset(date, config._tzm, false, true, config);\r\n    }\r\n    if (isString(input)) {\r\n        var tZone = offsetFromString(matchOffset, input);\r\n        if (tZone != null) {\r\n            return setUTCOffset(date, tZone, false, false, config);\r\n        }\r\n        return setUTCOffset(date, 0, true, false, config);\r\n    }\r\n    return date;\r\n}\r\nexport function hasAlignedHourOffset(date, input) {\r\n    var _input = input ? getUTCOffset(input, { _isUTC: false }) : 0;\r\n    return (getUTCOffset(date) - _input) % 60 === 0;\r\n}\r\n// DEPRECATED\r\n/*export function isDaylightSavingTimeShifted() {\r\n  if (!isUndefined(this._isDSTShifted)) {\r\n    return this._isDSTShifted;\r\n  }\r\n\r\n  const c = {};\r\n\r\n  copyConfig(c, this);\r\n  c = prepareConfig(c);\r\n\r\n  if (c._a) {\r\n    const other = c._isUTC ? createUTC(c._a) : createLocal(c._a);\r\n    this._isDSTShifted = this.isValid() &&\r\n      compareArrays(c._a, other.toArray()) > 0;\r\n  } else {\r\n    this._isDSTShifted = false;\r\n  }\r\n\r\n  return this._isDSTShifted;\r\n}*/\r\n// in Khronos\r\n/*export function isLocal() {\r\n  return this.isValid() ? !this._isUTC : false;\r\n}\r\n\r\nexport function isUtcOffset() {\r\n  return this.isValid() ? this._isUTC : false;\r\n}\r\n\r\nexport function isUtc() {\r\n  return this.isValid() ? this._isUTC && this._offset === 0 : false;\r\n}*/\r\n//# sourceMappingURL=offset.js.map",null]}