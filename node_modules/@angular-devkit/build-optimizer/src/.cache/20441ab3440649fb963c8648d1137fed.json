{"remainingRequest":"/home/dnyaneshwar/scriptlansProjects/uaswitchingwebsiteangular/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/dnyaneshwar/scriptlansProjects/uaswitchingwebsiteangular/node_modules/ngx-bootstrap/chronos/locale/locale.class.js","dependencies":[{"path":"/home/dnyaneshwar/scriptlansProjects/uaswitchingwebsiteangular/node_modules/ngx-bootstrap/chronos/locale/locale.class.js","mtime":1548147565782},{"path":"/home/dnyaneshwar/scriptlansProjects/uaswitchingwebsiteangular/node_modules/cache-loader/dist/cjs.js","mtime":1548147565162},{"path":"/home/dnyaneshwar/scriptlansProjects/uaswitchingwebsiteangular/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1548147564270}],"contextDependencies":[],"result":["// tslint:disable:max-file-line-count max-line-length cyclomatic-complexity\nimport { weekOfYear } from '../units/week-calendar-utils';\nimport { hasOwnProp, isArray, isFunction } from '../utils/type-checks';\nimport { getDay, getMonth } from '../utils/date-getters';\nimport { matchWord, regexEscape } from '../parse/regex';\nimport { setDayOfWeek } from '../units/day-of-week';\nvar MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/;\nexport var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\nexport var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');\nexport var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');\nexport var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');\nexport var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');\nexport var defaultLongDateFormat = {\n    LTS: 'h:mm:ss A',\n    LT: 'h:mm A',\n    L: 'MM/DD/YYYY',\n    LL: 'MMMM D, YYYY',\n    LLL: 'MMMM D, YYYY h:mm A',\n    LLLL: 'dddd, MMMM D, YYYY h:mm A'\n};\nexport var defaultOrdinal = '%d';\nexport var defaultDayOfMonthOrdinalParse = /\\d{1,2}/;\nvar defaultMonthsShortRegex = matchWord;\nvar defaultMonthsRegex = matchWord;\nvar Locale = /** @class */ /*@__PURE__*/ (function () {\n    function Locale(config) {\n        if (!!config) {\n            this.set(config);\n        }\n    }\n    Locale.prototype.set = function (config) {\n        var confKey;\n        for (confKey in config) {\n            if (!config.hasOwnProperty(confKey)) {\n                continue;\n            }\n            var prop = config[confKey];\n            var key = (isFunction(prop) ? confKey : \"_\" + confKey);\n            this[key] = prop;\n        }\n        this._config = config;\n    };\n    Locale.prototype.calendar = function (key, date, now) {\n        var output = this._calendar[key] || this._calendar.sameElse;\n        return isFunction(output) ? output.call(null, date, now) : output;\n    };\n    Locale.prototype.longDateFormat = function (key) {\n        var format = this._longDateFormat[key];\n        var formatUpper = this._longDateFormat[key.toUpperCase()];\n        if (format || !formatUpper) {\n            return format;\n        }\n        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {\n            return val.slice(1);\n        });\n        return this._longDateFormat[key];\n    };\n    Object.defineProperty(Locale.prototype, \"invalidDate\", {\n        get: function () {\n            return this._invalidDate;\n        },\n        set: function (val) {\n            this._invalidDate = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Locale.prototype.ordinal = function (num, token) {\n        return this._ordinal.replace('%d', num.toString(10));\n    };\n    Locale.prototype.preparse = function (str) {\n        return str;\n    };\n    Locale.prototype.postformat = function (str) {\n        return str;\n    };\n    Locale.prototype.relativeTime = function (num, withoutSuffix, str, isFuture) {\n        var output = this._relativeTime[str];\n        return (isFunction(output)) ?\n            output(num, withoutSuffix, str, isFuture) :\n            output.replace(/%d/i, num.toString(10));\n    };\n    Locale.prototype.pastFuture = function (diff, output) {\n        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n    };\n    Locale.prototype.months = function (date, format, isUTC) {\n        if (isUTC === void 0) {\n            isUTC = false;\n        }\n        if (!date) {\n            return isArray(this._months)\n                ? this._months\n                : this._months.standalone;\n        }\n        if (isArray(this._months)) {\n            return this._months[getMonth(date, isUTC)];\n        }\n        var key = (this._months.isFormat || MONTHS_IN_FORMAT).test(format)\n            ? 'format'\n            : 'standalone';\n        return this._months[key][getMonth(date, isUTC)];\n    };\n    Locale.prototype.monthsShort = function (date, format, isUTC) {\n        if (isUTC === void 0) {\n            isUTC = false;\n        }\n        if (!date) {\n            return isArray(this._monthsShort)\n                ? this._monthsShort\n                : this._monthsShort.standalone;\n        }\n        if (isArray(this._monthsShort)) {\n            return this._monthsShort[getMonth(date, isUTC)];\n        }\n        var key = MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone';\n        return this._monthsShort[key][getMonth(date, isUTC)];\n    };\n    Locale.prototype.monthsParse = function (monthName, format, strict) {\n        var date;\n        var regex;\n        if (this._monthsParseExact) {\n            return this.handleMonthStrictParse(monthName, format, strict);\n        }\n        if (!this._monthsParse) {\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n        }\n        // TODO: add sorting\n        // Sorting makes sure if one month (or abbr) is a prefix of another\n        // see sorting in computeMonthsParse\n        var i;\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            date = new Date(Date.UTC(2000, i));\n            if (strict && !this._longMonthsParse[i]) {\n                var _months = this.months(date, '', true).replace('.', '');\n                var _shortMonths = this.monthsShort(date, '', true).replace('.', '');\n                this._longMonthsParse[i] = new RegExp(\"^\" + _months + \"$\", 'i');\n                this._shortMonthsParse[i] = new RegExp(\"^\" + _shortMonths + \"$\", 'i');\n            }\n            if (!strict && !this._monthsParse[i]) {\n                regex = \"^\" + this.months(date, '', true) + \"|^\" + this.monthsShort(date, '', true);\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {\n                return i;\n            }\n            if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {\n                return i;\n            }\n            if (!strict && this._monthsParse[i].test(monthName)) {\n                return i;\n            }\n        }\n    };\n    Locale.prototype.monthsRegex = function (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                this.computeMonthsParse();\n            }\n            if (isStrict) {\n                return this._monthsStrictRegex;\n            }\n            return this._monthsRegex;\n        }\n        if (!hasOwnProp(this, '_monthsRegex')) {\n            this._monthsRegex = defaultMonthsRegex;\n        }\n        return this._monthsStrictRegex && isStrict ?\n            this._monthsStrictRegex : this._monthsRegex;\n    };\n    Locale.prototype.monthsShortRegex = function (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                this.computeMonthsParse();\n            }\n            if (isStrict) {\n                return this._monthsShortStrictRegex;\n            }\n            return this._monthsShortRegex;\n        }\n        if (!hasOwnProp(this, '_monthsShortRegex')) {\n            this._monthsShortRegex = defaultMonthsShortRegex;\n        }\n        return this._monthsShortStrictRegex && isStrict ?\n            this._monthsShortStrictRegex : this._monthsShortRegex;\n    };\n    /** Week */\n    /** Week */\n    Locale.prototype.week = /** Week */\n        function (date, isUTC) {\n            return weekOfYear(date, this._week.dow, this._week.doy, isUTC).week;\n        };\n    Locale.prototype.firstDayOfWeek = function () {\n        return this._week.dow;\n    };\n    Locale.prototype.firstDayOfYear = function () {\n        return this._week.doy;\n    };\n    Locale.prototype.weekdays = function (date, format, isUTC) {\n        if (!date) {\n            return isArray(this._weekdays)\n                ? this._weekdays\n                : this._weekdays.standalone;\n        }\n        if (isArray(this._weekdays)) {\n            return this._weekdays[getDay(date, isUTC)];\n        }\n        var _key = this._weekdays.isFormat.test(format)\n            ? 'format'\n            : 'standalone';\n        return this._weekdays[_key][getDay(date, isUTC)];\n    };\n    Locale.prototype.weekdaysMin = function (date, format, isUTC) {\n        return date ? this._weekdaysMin[getDay(date, isUTC)] : this._weekdaysMin;\n    };\n    Locale.prototype.weekdaysShort = function (date, format, isUTC) {\n        return date ? this._weekdaysShort[getDay(date, isUTC)] : this._weekdaysShort;\n    };\n    // proto.weekdaysParse  =        localeWeekdaysParse;\n    // proto.weekdaysParse  =        localeWeekdaysParse;\n    Locale.prototype.weekdaysParse =\n        // proto.weekdaysParse  =        localeWeekdaysParse;\n        function (weekdayName, format, strict) {\n            var i;\n            var regex;\n            if (this._weekdaysParseExact) {\n                return this.handleWeekStrictParse(weekdayName, format, strict);\n            }\n            if (!this._weekdaysParse) {\n                this._weekdaysParse = [];\n                this._minWeekdaysParse = [];\n                this._shortWeekdaysParse = [];\n                this._fullWeekdaysParse = [];\n            }\n            for (i = 0; i < 7; i++) {\n                // make the regex if we don't have it already\n                // fix: here is the issue\n                var date = setDayOfWeek(new Date(Date.UTC(2000, 1)), i, null, true);\n                if (strict && !this._fullWeekdaysParse[i]) {\n                    this._fullWeekdaysParse[i] = new RegExp(\"^\" + this.weekdays(date, '', true).replace('.', '\\.?') + \"$\", 'i');\n                    this._shortWeekdaysParse[i] = new RegExp(\"^\" + this.weekdaysShort(date, '', true).replace('.', '\\.?') + \"$\", 'i');\n                    this._minWeekdaysParse[i] = new RegExp(\"^\" + this.weekdaysMin(date, '', true).replace('.', '\\.?') + \"$\", 'i');\n                }\n                if (!this._weekdaysParse[i]) {\n                    regex = \"^\" + this.weekdays(date, '', true) + \"|^\" + this.weekdaysShort(date, '', true) + \"|^\" + this.weekdaysMin(date, '', true);\n                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n                }\n                if (!isArray(this._fullWeekdaysParse)\n                    || !isArray(this._shortWeekdaysParse)\n                    || !isArray(this._minWeekdaysParse)\n                    || !isArray(this._weekdaysParse)) {\n                    return;\n                }\n                // test the regex\n                if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {\n                    return i;\n                }\n                else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {\n                    return i;\n                }\n                else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {\n                    return i;\n                }\n                else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n                    return i;\n                }\n            }\n        };\n    // proto.weekdaysRegex       =        weekdaysRegex;\n    // proto.weekdaysRegex       =        weekdaysRegex;\n    Locale.prototype.weekdaysRegex =\n        // proto.weekdaysRegex       =        weekdaysRegex;\n        function (isStrict) {\n            if (this._weekdaysParseExact) {\n                if (!hasOwnProp(this, '_weekdaysRegex')) {\n                    this.computeWeekdaysParse();\n                }\n                if (isStrict) {\n                    return this._weekdaysStrictRegex;\n                }\n                else {\n                    return this._weekdaysRegex;\n                }\n            }\n            else {\n                if (!hasOwnProp(this, '_weekdaysRegex')) {\n                    this._weekdaysRegex = matchWord;\n                }\n                return this._weekdaysStrictRegex && isStrict ?\n                    this._weekdaysStrictRegex : this._weekdaysRegex;\n            }\n        };\n    // proto.weekdaysShortRegex  =        weekdaysShortRegex;\n    // proto.weekdaysMinRegex    =        weekdaysMinRegex;\n    // proto.weekdaysShortRegex  =        weekdaysShortRegex;\n    // proto.weekdaysMinRegex    =        weekdaysMinRegex;\n    Locale.prototype.weekdaysShortRegex =\n        // proto.weekdaysShortRegex  =        weekdaysShortRegex;\n        // proto.weekdaysMinRegex    =        weekdaysMinRegex;\n        function (isStrict) {\n            if (this._weekdaysParseExact) {\n                if (!hasOwnProp(this, '_weekdaysRegex')) {\n                    this.computeWeekdaysParse();\n                }\n                if (isStrict) {\n                    return this._weekdaysShortStrictRegex;\n                }\n                else {\n                    return this._weekdaysShortRegex;\n                }\n            }\n            else {\n                if (!hasOwnProp(this, '_weekdaysShortRegex')) {\n                    this._weekdaysShortRegex = matchWord;\n                }\n                return this._weekdaysShortStrictRegex && isStrict ?\n                    this._weekdaysShortStrictRegex : this._weekdaysShortRegex;\n            }\n        };\n    Locale.prototype.weekdaysMinRegex = function (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                this.computeWeekdaysParse();\n            }\n            if (isStrict) {\n                return this._weekdaysMinStrictRegex;\n            }\n            else {\n                return this._weekdaysMinRegex;\n            }\n        }\n        else {\n            if (!hasOwnProp(this, '_weekdaysMinRegex')) {\n                this._weekdaysMinRegex = matchWord;\n            }\n            return this._weekdaysMinStrictRegex && isStrict ?\n                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;\n        }\n    };\n    Locale.prototype.isPM = function (input) {\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n        // Using charAt should be more compatible.\n        return input.toLowerCase().charAt(0) === 'p';\n    };\n    Locale.prototype.meridiem = function (hours, minutes, isLower) {\n        if (hours > 11) {\n            return isLower ? 'pm' : 'PM';\n        }\n        return isLower ? 'am' : 'AM';\n    };\n    Locale.prototype.formatLongDate = function (key) {\n        this._longDateFormat = this._longDateFormat ? this._longDateFormat : defaultLongDateFormat;\n        var format = this._longDateFormat[key];\n        var formatUpper = this._longDateFormat[key.toUpperCase()];\n        if (format || !formatUpper) {\n            return format;\n        }\n        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {\n            return val.slice(1);\n        });\n        return this._longDateFormat[key];\n    };\n    Locale.prototype.handleMonthStrictParse = function (monthName, format, strict) {\n        var llc = monthName.toLocaleLowerCase();\n        var i;\n        var ii;\n        var mom;\n        if (!this._monthsParse) {\n            // this is not used\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n            for (i = 0; i < 12; ++i) {\n                mom = new Date(2000, i);\n                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();\n                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n            }\n        }\n        if (strict) {\n            if (format === 'MMM') {\n                ii = this._shortMonthsParse.indexOf(llc);\n                return ii !== -1 ? ii : null;\n            }\n            ii = this._longMonthsParse.indexOf(llc);\n            return ii !== -1 ? ii : null;\n        }\n        if (format === 'MMM') {\n            ii = this._shortMonthsParse.indexOf(llc);\n            if (ii !== -1) {\n                return ii;\n            }\n            ii = this._longMonthsParse.indexOf(llc);\n            return ii !== -1 ? ii : null;\n        }\n        ii = this._longMonthsParse.indexOf(llc);\n        if (ii !== -1) {\n            return ii;\n        }\n        ii = this._shortMonthsParse.indexOf(llc);\n        return ii !== -1 ? ii : null;\n    };\n    Locale.prototype.handleWeekStrictParse = function (weekdayName, format, strict) {\n        var ii;\n        var llc = weekdayName.toLocaleLowerCase();\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._minWeekdaysParse = [];\n            var i = void 0;\n            for (i = 0; i < 7; ++i) {\n                var date = setDayOfWeek(new Date(Date.UTC(2000, 1)), i, null, true);\n                this._minWeekdaysParse[i] = this.weekdaysMin(date).toLocaleLowerCase();\n                this._shortWeekdaysParse[i] = this.weekdaysShort(date).toLocaleLowerCase();\n                this._weekdaysParse[i] = this.weekdays(date, '').toLocaleLowerCase();\n            }\n        }\n        if (!isArray(this._weekdaysParse)\n            || !isArray(this._shortWeekdaysParse)\n            || !isArray(this._minWeekdaysParse)) {\n            return;\n        }\n        if (strict) {\n            if (format === 'dddd') {\n                ii = this._weekdaysParse.indexOf(llc);\n                return ii !== -1 ? ii : null;\n            }\n            else if (format === 'ddd') {\n                ii = this._shortWeekdaysParse.indexOf(llc);\n                return ii !== -1 ? ii : null;\n            }\n            else {\n                ii = this._minWeekdaysParse.indexOf(llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n        else {\n            if (format === 'dddd') {\n                ii = this._weekdaysParse.indexOf(llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = this._shortWeekdaysParse.indexOf(llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = this._minWeekdaysParse.indexOf(llc);\n                return ii !== -1 ? ii : null;\n            }\n            else if (format === 'ddd') {\n                ii = this._shortWeekdaysParse.indexOf(llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = this._weekdaysParse.indexOf(llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = this._minWeekdaysParse.indexOf(llc);\n                return ii !== -1 ? ii : null;\n            }\n            else {\n                ii = this._minWeekdaysParse.indexOf(llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = this._weekdaysParse.indexOf(llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = this._shortWeekdaysParse.indexOf(llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    };\n    Locale.prototype.computeMonthsParse = function () {\n        var shortPieces = [];\n        var longPieces = [];\n        var mixedPieces = [];\n        var date;\n        var i;\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            date = new Date(2000, i);\n            shortPieces.push(this.monthsShort(date, ''));\n            longPieces.push(this.months(date, ''));\n            mixedPieces.push(this.months(date, ''));\n            mixedPieces.push(this.monthsShort(date, ''));\n        }\n        // Sorting makes sure if one month (or abbr) is a prefix of another it\n        // will match the longer piece.\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 12; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n        }\n        for (i = 0; i < 24; i++) {\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n        this._monthsRegex = new RegExp(\"^(\" + mixedPieces.join('|') + \")\", 'i');\n        this._monthsShortRegex = this._monthsRegex;\n        this._monthsStrictRegex = new RegExp(\"^(\" + longPieces.join('|') + \")\", 'i');\n        this._monthsShortStrictRegex = new RegExp(\"^(\" + shortPieces.join('|') + \")\", 'i');\n    };\n    Locale.prototype.computeWeekdaysParse = function () {\n        var minPieces = [];\n        var shortPieces = [];\n        var longPieces = [];\n        var mixedPieces = [];\n        var i;\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n            // let mom = createUTC([2000, 1]).day(i);\n            var date = setDayOfWeek(new Date(Date.UTC(2000, 1)), i, null, true);\n            var minp = this.weekdaysMin(date);\n            var shortp = this.weekdaysShort(date);\n            var longp = this.weekdays(date);\n            minPieces.push(minp);\n            shortPieces.push(shortp);\n            longPieces.push(longp);\n            mixedPieces.push(minp);\n            mixedPieces.push(shortp);\n            mixedPieces.push(longp);\n        }\n        // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n        // will match the longer piece.\n        minPieces.sort(cmpLenRev);\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 7; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n        this._weekdaysRegex = new RegExp(\"^(\" + mixedPieces.join('|') + \")\", 'i');\n        this._weekdaysShortRegex = this._weekdaysRegex;\n        this._weekdaysMinRegex = this._weekdaysRegex;\n        this._weekdaysStrictRegex = new RegExp(\"^(\" + longPieces.join('|') + \")\", 'i');\n        this._weekdaysShortStrictRegex = new RegExp(\"^(\" + shortPieces.join('|') + \")\", 'i');\n        this._weekdaysMinStrictRegex = new RegExp(\"^(\" + minPieces.join('|') + \")\", 'i');\n    };\n    return Locale;\n}());\nexport { Locale };\nfunction cmpLenRev(a, b) {\n    return b.length - a.length;\n}\n//# sourceMappingURL=locale.class.js.map\n",null]}