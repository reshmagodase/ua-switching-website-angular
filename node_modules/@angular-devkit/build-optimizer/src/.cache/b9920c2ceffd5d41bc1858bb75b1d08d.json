{"remainingRequest":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\chronos\\units\\week-calendar-utils.js","dependencies":[{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\chronos\\units\\week-calendar-utils.js","mtime":1676443216654},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676443201610},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1676443192566}],"contextDependencies":[],"result":["import { createUTCDate } from '../create/date-from-array';\r\nimport { daysInYear } from './year';\r\nimport { getDayOfYear } from './day-of-year';\r\nimport { getFullYear } from '../utils/date-getters';\r\nfunction firstWeekOffset(year, dow, doy) {\r\n    // first-week day -- which january is always in the first week (4 for iso, 1 for other)\r\n    var fwd = dow - doy + 7;\r\n    // first-week day local weekday -- which local weekday is fwd\r\n    var fwdlw = (createUTCDate(year, 0, fwd).getUTCDay() - dow + 7) % 7;\r\n    return -fwdlw + fwd - 1;\r\n}\r\n// https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\r\nexport function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\r\n    var localWeekday = (7 + weekday - dow) % 7;\r\n    var weekOffset = firstWeekOffset(year, dow, doy);\r\n    var dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset;\r\n    var resYear;\r\n    var resDayOfYear;\r\n    if (dayOfYear <= 0) {\r\n        resYear = year - 1;\r\n        resDayOfYear = daysInYear(resYear) + dayOfYear;\r\n    }\r\n    else if (dayOfYear > daysInYear(year)) {\r\n        resYear = year + 1;\r\n        resDayOfYear = dayOfYear - daysInYear(year);\r\n    }\r\n    else {\r\n        resYear = year;\r\n        resDayOfYear = dayOfYear;\r\n    }\r\n    return {\r\n        year: resYear,\r\n        dayOfYear: resDayOfYear\r\n    };\r\n}\r\nexport function weekOfYear(date, dow, doy, isUTC) {\r\n    var weekOffset = firstWeekOffset(getFullYear(date, isUTC), dow, doy);\r\n    var week = Math.floor((getDayOfYear(date, isUTC) - weekOffset - 1) / 7) + 1;\r\n    var resWeek;\r\n    var resYear;\r\n    if (week < 1) {\r\n        resYear = getFullYear(date, isUTC) - 1;\r\n        resWeek = week + weeksInYear(resYear, dow, doy);\r\n    }\r\n    else if (week > weeksInYear(getFullYear(date, isUTC), dow, doy)) {\r\n        resWeek = week - weeksInYear(getFullYear(date, isUTC), dow, doy);\r\n        resYear = getFullYear(date, isUTC) + 1;\r\n    }\r\n    else {\r\n        resYear = getFullYear(date, isUTC);\r\n        resWeek = week;\r\n    }\r\n    return {\r\n        week: resWeek,\r\n        year: resYear\r\n    };\r\n}\r\nexport function weeksInYear(year, dow, doy) {\r\n    var weekOffset = firstWeekOffset(year, dow, doy);\r\n    var weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\r\n    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\r\n}\r\n//# sourceMappingURL=week-calendar-utils.js.map",null]}