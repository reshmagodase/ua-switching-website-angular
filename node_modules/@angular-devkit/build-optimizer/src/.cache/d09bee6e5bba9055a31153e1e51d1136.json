{"remainingRequest":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\utils\\triggers.js","dependencies":[{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\utils\\triggers.js","mtime":1676443217474},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676443201610},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1676443192566}],"contextDependencies":[],"result":["import { Trigger } from './trigger.class';\r\nvar DEFAULT_ALIASES = {\r\n    hover: ['mouseover', 'mouseout'],\r\n    focus: ['focusin', 'focusout']\r\n};\r\nexport function parseTriggers(triggers, aliases) {\r\n    if (aliases === void 0) { aliases = DEFAULT_ALIASES; }\r\n    var trimmedTriggers = (triggers || '').trim();\r\n    if (trimmedTriggers.length === 0) {\r\n        return [];\r\n    }\r\n    var parsedTriggers = trimmedTriggers\r\n        .split(/\\s+/)\r\n        .map(function (trigger) { return trigger.split(':'); })\r\n        .map(function (triggerPair) {\r\n        var alias = aliases[triggerPair[0]] || triggerPair;\r\n        return new Trigger(alias[0], alias[1]);\r\n    });\r\n    var manualTriggers = parsedTriggers.filter(function (triggerPair) {\r\n        return triggerPair.isManual();\r\n    });\r\n    if (manualTriggers.length > 1) {\r\n        throw new Error('Triggers parse error: only one manual trigger is allowed');\r\n    }\r\n    if (manualTriggers.length === 1 && parsedTriggers.length > 1) {\r\n        throw new Error('Triggers parse error: manual trigger can\\'t be mixed with other triggers');\r\n    }\r\n    return parsedTriggers;\r\n}\r\nexport function listenToTriggers(renderer, target, triggers, showFn, hideFn, toggleFn) {\r\n    var parsedTriggers = parseTriggers(triggers);\r\n    var listeners = [];\r\n    if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {\r\n        return Function.prototype;\r\n    }\r\n    parsedTriggers.forEach(function (trigger) {\r\n        if (trigger.open === trigger.close) {\r\n            listeners.push(renderer.listen(target, trigger.open, toggleFn));\r\n            return;\r\n        }\r\n        listeners.push(renderer.listen(target, trigger.open, showFn), renderer.listen(target, trigger.close, hideFn));\r\n    });\r\n    return function () {\r\n        listeners.forEach(function (unsubscribeFn) { return unsubscribeFn(); });\r\n    };\r\n}\r\nexport function listenToTriggersV2(renderer, options) {\r\n    var parsedTriggers = parseTriggers(options.triggers);\r\n    var target = options.target;\r\n    // do nothing\r\n    if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {\r\n        return Function.prototype;\r\n    }\r\n    // all listeners\r\n    var listeners = [];\r\n    // lazy listeners registration\r\n    var _registerHide = [];\r\n    var registerHide = function () {\r\n        // add hide listeners to unregister array\r\n        _registerHide.forEach(function (fn) { return listeners.push(fn()); });\r\n        // register hide events only once\r\n        _registerHide.length = 0;\r\n    };\r\n    // register open\\close\\toggle listeners\r\n    parsedTriggers.forEach(function (trigger) {\r\n        var useToggle = trigger.open === trigger.close;\r\n        var showFn = useToggle ? options.toggle : options.show;\r\n        if (!useToggle) {\r\n            _registerHide.push(function () {\r\n                return renderer.listen(target, trigger.close, options.hide);\r\n            });\r\n        }\r\n        listeners.push(renderer.listen(target, trigger.open, function () { return showFn(registerHide); }));\r\n    });\r\n    return function () {\r\n        listeners.forEach(function (unsubscribeFn) { return unsubscribeFn(); });\r\n    };\r\n}\r\nexport function registerOutsideClick(renderer, options) {\r\n    if (!options.outsideClick) {\r\n        return Function.prototype;\r\n    }\r\n    return renderer.listen('document', 'click', function (event) {\r\n        if (options.target && options.target.contains(event.target)) {\r\n            return;\r\n        }\r\n        if (options.targets &&\r\n            options.targets.some(function (target) { return target.contains(event.target); })) {\r\n            return;\r\n        }\r\n        options.hide();\r\n    });\r\n}\r\n//# sourceMappingURL=triggers.js.map",null]}