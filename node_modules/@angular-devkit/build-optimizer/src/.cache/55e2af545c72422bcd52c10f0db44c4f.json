{"remainingRequest":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\component-loader\\component-loader.class.js","dependencies":[{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\component-loader\\component-loader.class.js","mtime":1676443216734},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676443201610},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1676443192566}],"contextDependencies":[],"result":["import { ElementRef, EventEmitter, ReflectiveInjector, TemplateRef } from '@angular/core';\r\nimport { listenToTriggersV2, registerOutsideClick } from '../utils/triggers';\r\nimport { ContentRef } from './content-ref.class';\r\nvar ComponentLoader = /** @class */ (function () {\r\n    /**\r\n     * Do not use this directly, it should be instanced via\r\n     * `ComponentLoadFactory.attach`\r\n     * @internal\r\n     */\r\n    // tslint:disable-next-line\r\n    function ComponentLoader(_viewContainerRef, _renderer, _elementRef, _injector, _componentFactoryResolver, _ngZone, _applicationRef, _posService) {\r\n        this._viewContainerRef = _viewContainerRef;\r\n        this._renderer = _renderer;\r\n        this._elementRef = _elementRef;\r\n        this._injector = _injector;\r\n        this._componentFactoryResolver = _componentFactoryResolver;\r\n        this._ngZone = _ngZone;\r\n        this._applicationRef = _applicationRef;\r\n        this._posService = _posService;\r\n        this.onBeforeShow = new EventEmitter();\r\n        this.onShown = new EventEmitter();\r\n        this.onBeforeHide = new EventEmitter();\r\n        this.onHidden = new EventEmitter();\r\n        this._providers = [];\r\n        this._isHiding = false;\r\n        this._listenOpts = {};\r\n        this._globalListener = Function.prototype;\r\n    }\r\n    Object.defineProperty(ComponentLoader.prototype, \"isShown\", {\r\n        get: function () {\r\n            if (this._isHiding) {\r\n                return false;\r\n            }\r\n            return !!this._componentRef;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ComponentLoader.prototype.attach = function (compType) {\r\n        this._componentFactory = this._componentFactoryResolver\r\n            .resolveComponentFactory(compType);\r\n        return this;\r\n    };\r\n    // todo: add behaviour: to target element, `body`, custom element\r\n    // todo: add behaviour: to target element, `body`, custom element\r\n    ComponentLoader.prototype.to = \r\n    // todo: add behaviour: to target element, `body`, custom element\r\n    function (container) {\r\n        this.container = container || this.container;\r\n        return this;\r\n    };\r\n    ComponentLoader.prototype.position = function (opts) {\r\n        this.attachment = opts.attachment || this.attachment;\r\n        this._elementRef = opts.target || this._elementRef;\r\n        return this;\r\n    };\r\n    ComponentLoader.prototype.provide = function (provider) {\r\n        this._providers.push(provider);\r\n        return this;\r\n    };\r\n    // todo: appendChild to element or document.querySelector(this.container)\r\n    // todo: appendChild to element or document.querySelector(this.container)\r\n    ComponentLoader.prototype.show = \r\n    // todo: appendChild to element or document.querySelector(this.container)\r\n    function (opts) {\r\n        if (opts === void 0) { opts = {}; }\r\n        this._subscribePositioning();\r\n        this._innerComponent = null;\r\n        if (!this._componentRef) {\r\n            this.onBeforeShow.emit();\r\n            this._contentRef = this._getContentRef(opts.content, opts.context, opts.initialState);\r\n            var injector = ReflectiveInjector.resolveAndCreate(this._providers, this._injector);\r\n            this._componentRef = this._componentFactory.create(injector, this._contentRef.nodes);\r\n            this._applicationRef.attachView(this._componentRef.hostView);\r\n            // this._componentRef = this._viewContainerRef\r\n            //   .createComponent(this._componentFactory, 0, injector, this._contentRef.nodes);\r\n            this.instance = this._componentRef.instance;\r\n            Object.assign(this._componentRef.instance, opts);\r\n            if (this.container instanceof ElementRef) {\r\n                this.container.nativeElement.appendChild(this._componentRef.location.nativeElement);\r\n            }\r\n            if (this.container === 'body' && typeof document !== 'undefined') {\r\n                document\r\n                    .querySelector(this.container)\r\n                    .appendChild(this._componentRef.location.nativeElement);\r\n            }\r\n            if (!this.container &&\r\n                this._elementRef &&\r\n                this._elementRef.nativeElement.parentElement) {\r\n                this._elementRef.nativeElement.parentElement.appendChild(this._componentRef.location.nativeElement);\r\n            }\r\n            // we need to manually invoke change detection since events registered\r\n            // via\r\n            // Renderer::listen() are not picked up by change detection with the\r\n            // OnPush strategy\r\n            if (this._contentRef.componentRef) {\r\n                this._innerComponent = this._contentRef.componentRef.instance;\r\n                this._contentRef.componentRef.changeDetectorRef.markForCheck();\r\n                this._contentRef.componentRef.changeDetectorRef.detectChanges();\r\n            }\r\n            this._componentRef.changeDetectorRef.markForCheck();\r\n            this._componentRef.changeDetectorRef.detectChanges();\r\n            this.onShown.emit(this._componentRef.instance);\r\n        }\r\n        this._registerOutsideClick();\r\n        return this._componentRef;\r\n    };\r\n    ComponentLoader.prototype.hide = function () {\r\n        if (!this._componentRef) {\r\n            return this;\r\n        }\r\n        this.onBeforeHide.emit(this._componentRef.instance);\r\n        var componentEl = this._componentRef.location.nativeElement;\r\n        componentEl.parentNode.removeChild(componentEl);\r\n        if (this._contentRef.componentRef) {\r\n            this._contentRef.componentRef.destroy();\r\n        }\r\n        this._componentRef.destroy();\r\n        if (this._viewContainerRef && this._contentRef.viewRef) {\r\n            this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._contentRef.viewRef));\r\n        }\r\n        if (this._contentRef.viewRef) {\r\n            this._contentRef.viewRef.destroy();\r\n        }\r\n        // this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._componentRef.hostView));\r\n        //\r\n        // if (this._contentRef.viewRef && this._viewContainerRef.indexOf(this._contentRef.viewRef) !== -1) {\r\n        //   this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._contentRef.viewRef));\r\n        // }\r\n        this._contentRef = null;\r\n        this._componentRef = null;\r\n        this._removeGlobalListener();\r\n        this.onHidden.emit();\r\n        return this;\r\n    };\r\n    ComponentLoader.prototype.toggle = function () {\r\n        if (this.isShown) {\r\n            this.hide();\r\n            return;\r\n        }\r\n        this.show();\r\n    };\r\n    ComponentLoader.prototype.dispose = function () {\r\n        if (this.isShown) {\r\n            this.hide();\r\n        }\r\n        this._unsubscribePositioning();\r\n        if (this._unregisterListenersFn) {\r\n            this._unregisterListenersFn();\r\n        }\r\n    };\r\n    ComponentLoader.prototype.listen = function (listenOpts) {\r\n        var _this = this;\r\n        this.triggers = listenOpts.triggers || this.triggers;\r\n        this._listenOpts.outsideClick = listenOpts.outsideClick;\r\n        listenOpts.target = listenOpts.target || this._elementRef.nativeElement;\r\n        var hide = (this._listenOpts.hide = function () {\r\n            return listenOpts.hide ? listenOpts.hide() : void _this.hide();\r\n        });\r\n        var show = (this._listenOpts.show = function (registerHide) {\r\n            listenOpts.show ? listenOpts.show(registerHide) : _this.show(registerHide);\r\n            registerHide();\r\n        });\r\n        var toggle = function (registerHide) {\r\n            _this.isShown ? hide() : show(registerHide);\r\n        };\r\n        this._unregisterListenersFn = listenToTriggersV2(this._renderer, {\r\n            target: listenOpts.target,\r\n            triggers: listenOpts.triggers,\r\n            show: show,\r\n            hide: hide,\r\n            toggle: toggle\r\n        });\r\n        return this;\r\n    };\r\n    ComponentLoader.prototype._removeGlobalListener = function () {\r\n        if (this._globalListener) {\r\n            this._globalListener();\r\n            this._globalListener = null;\r\n        }\r\n    };\r\n    ComponentLoader.prototype.attachInline = function (vRef, template) {\r\n        this._inlineViewRef = vRef.createEmbeddedView(template);\r\n        return this;\r\n    };\r\n    ComponentLoader.prototype._registerOutsideClick = function () {\r\n        var _this = this;\r\n        if (!this._componentRef || !this._componentRef.location) {\r\n            return;\r\n        }\r\n        // why: should run after first event bubble\r\n        if (this._listenOpts.outsideClick) {\r\n            var target_1 = this._componentRef.location.nativeElement;\r\n            setTimeout(function () {\r\n                _this._globalListener = registerOutsideClick(_this._renderer, {\r\n                    targets: [target_1, _this._elementRef.nativeElement],\r\n                    outsideClick: _this._listenOpts.outsideClick,\r\n                    hide: function () { return _this._listenOpts.hide(); }\r\n                });\r\n            });\r\n        }\r\n    };\r\n    ComponentLoader.prototype.getInnerComponent = function () {\r\n        return this._innerComponent;\r\n    };\r\n    ComponentLoader.prototype._subscribePositioning = function () {\r\n        var _this = this;\r\n        if (this._zoneSubscription || !this.attachment) {\r\n            return;\r\n        }\r\n        this._zoneSubscription = this._ngZone.onStable.subscribe(function () {\r\n            if (!_this._componentRef) {\r\n                return;\r\n            }\r\n            _this._posService.position({\r\n                element: _this._componentRef.location,\r\n                target: _this._elementRef,\r\n                attachment: _this.attachment,\r\n                appendToBody: _this.container === 'body'\r\n            });\r\n        });\r\n    };\r\n    ComponentLoader.prototype._unsubscribePositioning = function () {\r\n        if (!this._zoneSubscription) {\r\n            return;\r\n        }\r\n        this._zoneSubscription.unsubscribe();\r\n        this._zoneSubscription = null;\r\n    };\r\n    ComponentLoader.prototype._getContentRef = function (content, context, initialState) {\r\n        if (!content) {\r\n            return new ContentRef([]);\r\n        }\r\n        if (content instanceof TemplateRef) {\r\n            if (this._viewContainerRef) {\r\n                var _viewRef = this._viewContainerRef\r\n                    .createEmbeddedView(content, context);\r\n                _viewRef.markForCheck();\r\n                return new ContentRef([_viewRef.rootNodes], _viewRef);\r\n            }\r\n            var viewRef = content.createEmbeddedView({});\r\n            this._applicationRef.attachView(viewRef);\r\n            return new ContentRef([viewRef.rootNodes], viewRef);\r\n        }\r\n        if (typeof content === 'function') {\r\n            var contentCmptFactory = this._componentFactoryResolver.resolveComponentFactory(content);\r\n            var modalContentInjector = ReflectiveInjector.resolveAndCreate(this._providers.slice(), this._injector);\r\n            var componentRef = contentCmptFactory.create(modalContentInjector);\r\n            Object.assign(componentRef.instance, initialState);\r\n            this._applicationRef.attachView(componentRef.hostView);\r\n            return new ContentRef([[componentRef.location.nativeElement]], componentRef.hostView, componentRef);\r\n        }\r\n        return new ContentRef([[this._renderer.createText(\"\" + content)]]);\r\n    };\r\n    return ComponentLoader;\r\n}());\r\nexport { ComponentLoader };\r\n//# sourceMappingURL=component-loader.class.js.map",null]}