{"remainingRequest":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\chronos\\create\\from-string-and-array.js","dependencies":[{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\ngx-bootstrap\\chronos\\create\\from-string-and-array.js","mtime":1676443216306},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676443201610},{"path":"C:\\Users\\chinm\\Downloads\\uaswitchingwebsiteangular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1676443192566}],"contextDependencies":[],"result":["import { createInvalid, isValid } from './valid';\r\nimport { getParsingFlags } from './parsing-flags';\r\nimport { configFromStringAndFormat } from './from-string-and-format';\r\n// date from string and array of format strings\r\nexport function configFromStringAndArray(config) {\r\n    var tempConfig;\r\n    var bestMoment;\r\n    var scoreToBeat;\r\n    var currentScore;\r\n    if (!config._f || config._f.length === 0) {\r\n        getParsingFlags(config).invalidFormat = true;\r\n        return createInvalid(config);\r\n    }\r\n    var i;\r\n    for (i = 0; i < config._f.length; i++) {\r\n        currentScore = 0;\r\n        tempConfig = Object.assign({}, config);\r\n        if (config._useUTC != null) {\r\n            tempConfig._useUTC = config._useUTC;\r\n        }\r\n        tempConfig._f = config._f[i];\r\n        configFromStringAndFormat(tempConfig);\r\n        if (!isValid(tempConfig)) {\r\n            continue;\r\n        }\r\n        // if there is any input that was not parsed add a penalty for that format\r\n        currentScore += getParsingFlags(tempConfig).charsLeftOver;\r\n        // or tokens\r\n        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\r\n        getParsingFlags(tempConfig).score = currentScore;\r\n        if (scoreToBeat == null || currentScore < scoreToBeat) {\r\n            scoreToBeat = currentScore;\r\n            bestMoment = tempConfig;\r\n        }\r\n    }\r\n    return Object.assign(config, bestMoment || tempConfig);\r\n}\r\n//# sourceMappingURL=from-string-and-array.js.map",null]}