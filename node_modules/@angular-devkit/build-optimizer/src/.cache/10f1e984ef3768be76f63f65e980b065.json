{"remainingRequest":"/home/anaghajoshi/Desktop/Anagha/uaswitchingwebsiteangular/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/anaghajoshi/Desktop/Anagha/uaswitchingwebsiteangular/node_modules/core-js/modules/_math-fround.js","dependencies":[{"path":"/home/anaghajoshi/Desktop/Anagha/uaswitchingwebsiteangular/node_modules/core-js/modules/_math-fround.js","mtime":1551251659695},{"path":"/home/anaghajoshi/Desktop/Anagha/uaswitchingwebsiteangular/node_modules/cache-loader/dist/cjs.js","mtime":1551251659635},{"path":"/home/anaghajoshi/Desktop/Anagha/uaswitchingwebsiteangular/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1551251659207}],"contextDependencies":[],"result":["// 20.2.2.16 Math.fround(x)\nvar sign = require('./_math-sign');\nvar pow = Math.pow;\nvar EPSILON = pow(2, -52);\nvar EPSILON32 = pow(2, -23);\nvar MAX32 = pow(2, 127) * (2 - EPSILON32);\nvar MIN32 = pow(2, -126);\n\nvar roundTiesToEven = function (n) {\n  return n + 1 / EPSILON - 1 / EPSILON;\n};\n\nmodule.exports = Math.fround || function fround(x) {\n  var $abs = Math.abs(x);\n  var $sign = sign(x);\n  var a, result;\n  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;\n  a = (1 + EPSILON32 / EPSILON) * $abs;\n  result = a - (a - $abs);\n  // eslint-disable-next-line no-self-compare\n  if (result > MAX32 || result != result) return $sign * Infinity;\n  return $sign * result;\n};\n",null]}